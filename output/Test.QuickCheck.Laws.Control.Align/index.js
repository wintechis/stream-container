// Generated by purs version 0.15.10
import * as Control_Bind from "../Control.Bind/index.js";
import * as Control_Category from "../Control.Category/index.js";
import * as Data_Align from "../Data.Align/index.js";
import * as Data_Bifunctor from "../Data.Bifunctor/index.js";
import * as Data_Eq from "../Data.Eq/index.js";
import * as Data_Functor from "../Data.Functor/index.js";
import * as Data_These from "../Data.These/index.js";
import * as Effect_Console from "../Effect.Console/index.js";
import * as Test_QuickCheck from "../Test.QuickCheck/index.js";
import * as Test_QuickCheck_Arbitrary from "../Test.QuickCheck.Arbitrary/index.js";
import * as Test_QuickCheck_Laws from "../Test.QuickCheck.Laws/index.js";
var join = /* #__PURE__ */ Control_Bind.join(Control_Bind.bindFn);
var identity = /* #__PURE__ */ Control_Category.identity(Control_Category.categoryFn);
var bimap = /* #__PURE__ */ Data_Bifunctor.bimap(Data_These.bifunctorThese);
var testableFunction = /* #__PURE__ */ Test_QuickCheck.testableFunction(/* #__PURE__ */ Test_QuickCheck_Arbitrary.arbFunction(Test_QuickCheck_Laws.coarbitraryA)(Test_QuickCheck_Laws.arbitraryC))(/* #__PURE__ */ Test_QuickCheck.testableFunction(/* #__PURE__ */ Test_QuickCheck_Arbitrary.arbFunction(Test_QuickCheck_Laws.coarbitraryB)(Test_QuickCheck_Laws.arbitraryD))(Test_QuickCheck.testableBoolean));
var checkAlign = function (dictAlign) {
    var align = Data_Align.align(dictAlign);
    var map = Data_Functor.map(dictAlign.Functor0());
    return function (dictArbitrary) {
        var testableFunction1 = Test_QuickCheck.testableFunction(dictArbitrary);
        var quickCheck$prime = Test_QuickCheck["quickCheck$prime"](testableFunction1(Test_QuickCheck.testableBoolean));
        return function (dictArbitrary1) {
            var testableFunction2 = Test_QuickCheck.testableFunction(dictArbitrary1);
            var quickCheck$prime1 = Test_QuickCheck["quickCheck$prime"](testableFunction1(testableFunction2(Test_QuickCheck.testableBoolean)));
            var quickCheck$prime2 = Test_QuickCheck["quickCheck$prime"](testableFunction1(testableFunction2(testableFunction)));
            return function (dictArbitrary2) {
                var quickCheck$prime3 = Test_QuickCheck["quickCheck$prime"](testableFunction1(testableFunction2(Test_QuickCheck.testableFunction(dictArbitrary2)(Test_QuickCheck.testableBoolean))));
                return function (dictEq) {
                    var eq = Data_Eq.eq(dictEq);
                    return function (dictEq1) {
                        var eq1 = Data_Eq.eq(dictEq1);
                        return function (dictEq2) {
                            var eq2 = Data_Eq.eq(dictEq2);
                            return function (dictEq3) {
                                var eq3 = Data_Eq.eq(dictEq3);
                                return function (v) {
                                    var idempotency = function (fa) {
                                        return eq(join(align(identity))(fa))(map(join(Data_These.Both.create))(fa));
                                    };
                                    var functoriality = function (a) {
                                        return function (b) {
                                            return function (f) {
                                                return function (g) {
                                                    return eq2(align(identity)(map(f)(a))(map(g)(b)))(map(bimap(f)(g))(align(identity)(a)(b)));
                                                };
                                            };
                                        };
                                    };
                                    var commutativity = function (fa) {
                                        return function (fb) {
                                            return eq1(align(identity)(fa)(fb))(map(Data_These.swap)(align(identity)(fb)(fa)));
                                        };
                                    };
                                    var associativity = function (fa) {
                                        return function (fb) {
                                            return function (fc) {
                                                return eq3(align(identity)(fa)(align(identity)(fb)(fc)))(map(Data_These.assoc)(align(identity)(align(identity)(fa)(fb))(fc)));
                                            };
                                        };
                                    };
                                    return function __do() {
                                        Effect_Console.log("Checking 'Idempotency' law for Align")();
                                        quickCheck$prime(1000)(idempotency)();
                                        Effect_Console.log("Checking 'Commutativity' law for Align")();
                                        quickCheck$prime1(1000)(commutativity)();
                                        Effect_Console.log("Checking 'Associativity' law for Align")();
                                        quickCheck$prime3(1000)(associativity)();
                                        Effect_Console.log("Checking 'Functoriality' law for Align")();
                                        return quickCheck$prime2(1000)(functoriality)();
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
};
export {
    checkAlign
};
