// Generated by purs version 0.15.10
import * as Control_Applicative from "../Control.Applicative/index.js";
import * as Control_Apply from "../Control.Apply/index.js";
import * as Control_Bind from "../Control.Bind/index.js";
import * as Data_Array from "../Data.Array/index.js";
import * as Data_Eq from "../Data.Eq/index.js";
import * as Data_Functor from "../Data.Functor/index.js";
import * as Data_List from "../Data.List/index.js";
import * as Data_List_Types from "../Data.List.Types/index.js";
import * as Data_Ord from "../Data.Ord/index.js";
import * as Data_Show from "../Data.Show/index.js";
import * as Data_Show_Generic from "../Data.Show.Generic/index.js";
import * as Data_String_Common from "../Data.String.Common/index.js";
import * as Data_Tuple from "../Data.Tuple/index.js";
import * as Parsing from "../Parsing/index.js";
import * as Parsing_String from "../Parsing.String/index.js";
import * as URI_Path_Segment from "../URI.Path.Segment/index.js";
var map = /* #__PURE__ */ Data_Functor.map(Data_Functor.functorArray);
var bind = /* #__PURE__ */ Control_Bind.bind(Parsing.bindParserT);
var manyRec = /* #__PURE__ */ Data_List.manyRec(Parsing.monadRecParserT)(Parsing.alternativeParserT);
var applySecond = /* #__PURE__ */ Control_Apply.applySecond(Parsing.applyParserT);
var pure = /* #__PURE__ */ Control_Applicative.pure(Parsing.applicativeParserT);
var fromFoldable = /* #__PURE__ */ Data_Array.fromFoldable(Data_List_Types.foldableList);
var eq = /* #__PURE__ */ Data_Eq.eq(/* #__PURE__ */ Data_Tuple.eqTuple(URI_Path_Segment.eqPathSegmentNZNC)(/* #__PURE__ */ Data_Eq.eqArray(URI_Path_Segment.eqPathSegment)));
var compare = /* #__PURE__ */ Data_Ord.compare(/* #__PURE__ */ Data_Tuple.ordTuple(URI_Path_Segment.ordPathSegmentNZNC)(/* #__PURE__ */ Data_Ord.ordArray(URI_Path_Segment.ordPathSegment)));
var PathNoScheme = function (x) {
    return x;
};
var print = function (v) {
    if (v.value1.length === 0) {
        return URI_Path_Segment.printSegmentNZNC(v.value0);
    };
    return URI_Path_Segment.printSegmentNZNC(v.value0) + ("/" + Data_String_Common.joinWith("/")(map(URI_Path_Segment.printSegment)(v.value1)));
};
var parse = /* #__PURE__ */ bind(URI_Path_Segment.parseSegmentNZNC)(function (head) {
    return bind(manyRec(applySecond(Parsing_String["char"]("/"))(URI_Path_Segment.parseSegment)))(function (tail) {
        return pure(new Data_Tuple.Tuple(head, fromFoldable(tail)));
    });
});
var genericPathNoScheme = {
    to: function (x) {
        return x;
    },
    from: function (x) {
        return x;
    }
};
var showPathNoScheme = {
    show: /* #__PURE__ */ Data_Show_Generic.genericShow(genericPathNoScheme)(/* #__PURE__ */ Data_Show_Generic.genericShowConstructor(/* #__PURE__ */ Data_Show_Generic.genericShowArgsArgument(/* #__PURE__ */ Data_Tuple.showTuple(URI_Path_Segment.showPathSegmentNZNC)(/* #__PURE__ */ Data_Show.showArray(URI_Path_Segment.showPathSegment))))({
        reflectSymbol: function () {
            return "PathNoScheme";
        }
    }))
};
var eqPathNoScheme = {
    eq: function (x) {
        return function (y) {
            return eq(x)(y);
        };
    }
};
var ordPathNoScheme = {
    compare: function (x) {
        return function (y) {
            return compare(x)(y);
        };
    },
    Eq0: function () {
        return eqPathNoScheme;
    }
};
export {
    PathNoScheme,
    parse,
    print,
    eqPathNoScheme,
    ordPathNoScheme,
    genericPathNoScheme,
    showPathNoScheme
};
