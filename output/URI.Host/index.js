// Generated by purs version 0.15.10
import * as Control_Alt from "../Control.Alt/index.js";
import * as Data_Eq from "../Data.Eq/index.js";
import * as Data_Functor from "../Data.Functor/index.js";
import * as Data_Generic_Rep from "../Data.Generic.Rep/index.js";
import * as Data_Lens_Prism from "../Data.Lens.Prism/index.js";
import * as Data_Maybe from "../Data.Maybe/index.js";
import * as Data_Ord from "../Data.Ord/index.js";
import * as Data_Ordering from "../Data.Ordering/index.js";
import * as Data_Show_Generic from "../Data.Show.Generic/index.js";
import * as Parsing from "../Parsing/index.js";
import * as Parsing_Combinators from "../Parsing.Combinators/index.js";
import * as URI_Host_IPv4Address from "../URI.Host.IPv4Address/index.js";
import * as URI_Host_IPv6Address from "../URI.Host.IPv6Address/index.js";
import * as URI_Host_RegName from "../URI.Host.RegName/index.js";
var alt = /* #__PURE__ */ Control_Alt.alt(Parsing.altParserT);
var map = /* #__PURE__ */ Data_Functor.map(Parsing.functorParserT);
var eq = /* #__PURE__ */ Data_Eq.eq(URI_Host_IPv6Address.eqIPv6Address);
var eq1 = /* #__PURE__ */ Data_Eq.eq(URI_Host_IPv4Address.eqIPv4Address);
var eq2 = /* #__PURE__ */ Data_Eq.eq(URI_Host_RegName.eqRegName);
var compare = /* #__PURE__ */ Data_Ord.compare(URI_Host_IPv6Address.ordIPv6Address);
var compare1 = /* #__PURE__ */ Data_Ord.compare(URI_Host_IPv4Address.ordIPv4Address);
var compare2 = /* #__PURE__ */ Data_Ord.compare(URI_Host_RegName.ordRegName);
var IPv6Address = /* #__PURE__ */ (function () {
    function IPv6Address(value0) {
        this.value0 = value0;
    };
    IPv6Address.create = function (value0) {
        return new IPv6Address(value0);
    };
    return IPv6Address;
})();
var IPv4Address = /* #__PURE__ */ (function () {
    function IPv4Address(value0) {
        this.value0 = value0;
    };
    IPv4Address.create = function (value0) {
        return new IPv4Address(value0);
    };
    return IPv4Address;
})();
var NameAddress = /* #__PURE__ */ (function () {
    function NameAddress(value0) {
        this.value0 = value0;
    };
    NameAddress.create = function (value0) {
        return new NameAddress(value0);
    };
    return NameAddress;
})();
var print = function (v) {
    if (v instanceof IPv6Address) {
        return URI_Host_IPv6Address.unsafeToString(v.value0);
    };
    if (v instanceof IPv4Address) {
        return URI_Host_IPv4Address.print(v.value0);
    };
    if (v instanceof NameAddress) {
        return URI_Host_RegName.print(v.value0);
    };
    throw new Error("Failed pattern match at URI.Host (line 50, column 9 - line 53, column 41): " + [ v.constructor.name ]);
};
var parser = /* #__PURE__ */ (function () {
    return alt(map(IPv6Address.create)(URI_Host_IPv6Address.parser))(alt(Parsing_Combinators["try"](map(IPv4Address.create)(URI_Host_IPv4Address.parser)))(map(NameAddress.create)(URI_Host_RegName.parser)));
})();
var genericHost = {
    to: function (x) {
        if (x instanceof Data_Generic_Rep.Inl) {
            return new IPv6Address(x.value0);
        };
        if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inl) {
            return new IPv4Address(x.value0.value0);
        };
        if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inr) {
            return new NameAddress(x.value0.value0);
        };
        throw new Error("Failed pattern match at URI.Host (line 37, column 1 - line 37, column 46): " + [ x.constructor.name ]);
    },
    from: function (x) {
        if (x instanceof IPv6Address) {
            return new Data_Generic_Rep.Inl(x.value0);
        };
        if (x instanceof IPv4Address) {
            return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0));
        };
        if (x instanceof NameAddress) {
            return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(x.value0));
        };
        throw new Error("Failed pattern match at URI.Host (line 37, column 1 - line 37, column 46): " + [ x.constructor.name ]);
    }
};
var showHost = {
    show: /* #__PURE__ */ Data_Show_Generic.genericShow(genericHost)(/* #__PURE__ */ Data_Show_Generic.genericShowSum(/* #__PURE__ */ Data_Show_Generic.genericShowConstructor(/* #__PURE__ */ Data_Show_Generic.genericShowArgsArgument(URI_Host_IPv6Address.showIPv6Address))({
        reflectSymbol: function () {
            return "IPv6Address";
        }
    }))(/* #__PURE__ */ Data_Show_Generic.genericShowSum(/* #__PURE__ */ Data_Show_Generic.genericShowConstructor(/* #__PURE__ */ Data_Show_Generic.genericShowArgsArgument(URI_Host_IPv4Address.showIPv4Address))({
        reflectSymbol: function () {
            return "IPv4Address";
        }
    }))(/* #__PURE__ */ Data_Show_Generic.genericShowConstructor(/* #__PURE__ */ Data_Show_Generic.genericShowArgsArgument(URI_Host_RegName.showRegName))({
        reflectSymbol: function () {
            return "NameAddress";
        }
    }))))
};
var eqHost = {
    eq: function (x) {
        return function (y) {
            if (x instanceof IPv6Address && y instanceof IPv6Address) {
                return eq(x.value0)(y.value0);
            };
            if (x instanceof IPv4Address && y instanceof IPv4Address) {
                return eq1(x.value0)(y.value0);
            };
            if (x instanceof NameAddress && y instanceof NameAddress) {
                return eq2(x.value0)(y.value0);
            };
            return false;
        };
    }
};
var ordHost = {
    compare: function (x) {
        return function (y) {
            if (x instanceof IPv6Address && y instanceof IPv6Address) {
                return compare(x.value0)(y.value0);
            };
            if (x instanceof IPv6Address) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof IPv6Address) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof IPv4Address && y instanceof IPv4Address) {
                return compare1(x.value0)(y.value0);
            };
            if (x instanceof IPv4Address) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof IPv4Address) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof NameAddress && y instanceof NameAddress) {
                return compare2(x.value0)(y.value0);
            };
            throw new Error("Failed pattern match at URI.Host (line 0, column 0 - line 0, column 0): " + [ x.constructor.name, y.constructor.name ]);
        };
    },
    Eq0: function () {
        return eqHost;
    }
};
var _NameAddress = function (dictChoice) {
    return Data_Lens_Prism["prism$prime"](NameAddress.create)(function (v) {
        if (v instanceof NameAddress) {
            return new Data_Maybe.Just(v.value0);
        };
        return Data_Maybe.Nothing.value;
    })(dictChoice);
};
var _IPv6Address = function (dictChoice) {
    return Data_Lens_Prism["prism$prime"](IPv6Address.create)(function (v) {
        if (v instanceof IPv6Address) {
            return new Data_Maybe.Just(v.value0);
        };
        return Data_Maybe.Nothing.value;
    })(dictChoice);
};
var _IPv4Address = function (dictChoice) {
    return Data_Lens_Prism["prism$prime"](IPv4Address.create)(function (v) {
        if (v instanceof IPv4Address) {
            return new Data_Maybe.Just(v.value0);
        };
        return Data_Maybe.Nothing.value;
    })(dictChoice);
};
export {
    IPv6Address,
    IPv4Address,
    NameAddress,
    parser,
    print,
    _IPv6Address,
    _IPv4Address,
    _NameAddress,
    eqHost,
    ordHost,
    genericHost,
    showHost
};
