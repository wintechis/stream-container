// Generated by purs version 0.15.10
import * as Control_Alt from "../Control.Alt/index.js";
import * as Control_Applicative from "../Control.Applicative/index.js";
import * as Control_Bind from "../Control.Bind/index.js";
import * as Data_Array from "../Data.Array/index.js";
import * as Data_Bifunctor from "../Data.Bifunctor/index.js";
import * as Data_Either from "../Data.Either/index.js";
import * as Data_Eq from "../Data.Eq/index.js";
import * as Data_Foldable from "../Data.Foldable/index.js";
import * as Data_Function from "../Data.Function/index.js";
import * as Data_Functor from "../Data.Functor/index.js";
import * as Data_Identity from "../Data.Identity/index.js";
import * as Data_List from "../Data.List/index.js";
import * as Data_List_Types from "../Data.List.Types/index.js";
import * as Data_Maybe from "../Data.Maybe/index.js";
import * as Data_Monoid from "../Data.Monoid/index.js";
import * as Data_Ord from "../Data.Ord/index.js";
import * as Data_Semigroup from "../Data.Semigroup/index.js";
import * as Data_Show from "../Data.Show/index.js";
import * as Data_Show_Generic from "../Data.Show.Generic/index.js";
import * as Data_String_Common from "../Data.String.Common/index.js";
import * as Data_String_NonEmpty_CodeUnits from "../Data.String.NonEmpty.CodeUnits/index.js";
import * as Data_String_NonEmpty_Internal from "../Data.String.NonEmpty.Internal/index.js";
import * as Data_Traversable from "../Data.Traversable/index.js";
import * as Data_Tuple from "../Data.Tuple/index.js";
import * as JSURI from "../JSURI/index.js";
import * as Parsing from "../Parsing/index.js";
import * as Parsing_Combinators from "../Parsing.Combinators/index.js";
import * as Parsing_String from "../Parsing.String/index.js";
import * as Parsing_String_Basic from "../Parsing.String.Basic/index.js";
import * as URI_Common from "../URI.Common/index.js";
import * as URI_Query from "../URI.Query/index.js";
var fromJust = /* #__PURE__ */ Data_Maybe.fromJust();
var show = /* #__PURE__ */ Data_Show.show(Data_Show.showString);
var fromFoldable = /* #__PURE__ */ Data_Array.fromFoldable(Data_Foldable.foldableArray);
var map = /* #__PURE__ */ Data_Functor.map(Data_Functor.functorArray);
var alt = /* #__PURE__ */ Control_Alt.alt(Parsing.altParserT);
var bind = /* #__PURE__ */ Control_Bind.bind(Parsing.bindParserT);
var wrapParser = /* #__PURE__ */ URI_Common.wrapParser(Data_Identity.monadIdentity);
var map1 = /* #__PURE__ */ Data_Functor.map(Parsing.functorParserT);
var joinWith = /* #__PURE__ */ Data_String_NonEmpty_Internal.joinWith(Data_List_Types.foldableList);
var someRec = /* #__PURE__ */ Data_List.someRec(Parsing.monadRecParserT)(Parsing.alternativeParserT);
var traverse = /* #__PURE__ */ Data_Traversable.traverse(Data_Traversable.traversableMaybe)(Data_Either.applicativeEither);
var manyRec = /* #__PURE__ */ Data_List.manyRec(Parsing.monadRecParserT)(Parsing.alternativeParserT);
var pure = /* #__PURE__ */ Control_Applicative.pure(Parsing.applicativeParserT);
var bimap = /* #__PURE__ */ Data_Bifunctor.bimap(Data_Bifunctor.bifunctorEither);
var fromFoldable1 = /* #__PURE__ */ Data_Array.fromFoldable(Data_List_Types.foldableList);
var QueryPairsIsSymbol = {
    reflectSymbol: function () {
        return "QueryPairs";
    }
};
var Value = function (x) {
    return x;
};
var QueryPairs = function (x) {
    return x;
};
var Key = function (x) {
    return x;
};
var valueToString = function (v) {
    return fromJust(JSURI["decodeURIComponent"](v));
};
var unsafeValueToString = function (v) {
    return v;
};
var unsafeValueFromString = Value;
var unsafeKeyToString = function (v) {
    return v;
};
var unsafeKeyFromString = Key;
var showValue = {
    show: function (v) {
        return "(QueryPairs.unsafeValueFromString " + (show(v) + ")");
    }
};
var showKey = {
    show: function (v) {
        return "(QueryPairs.unsafeKeyFromString " + (show(v) + ")");
    }
};
var semigroupValue = Data_Semigroup.semigroupString;
var semigroupQueryPairs = Data_Semigroup.semigroupArray;
var semigroupKey = Data_Semigroup.semigroupString;
var print = function (printK) {
    return function (printV) {
        return function (v) {
            var printPart = function (v1) {
                if (v1.value1 instanceof Data_Maybe.Nothing) {
                    return unsafeKeyToString(printK(v1.value0));
                };
                if (v1.value1 instanceof Data_Maybe.Just) {
                    return unsafeKeyToString(printK(v1.value0)) + ("=" + unsafeValueToString(printV(v1.value1.value0)));
                };
                throw new Error("Failed pattern match at URI.Extra.QueryPairs (line 106, column 15 - line 110, column 76): " + [ v1.constructor.name ]);
            };
            return URI_Query.unsafeFromString(Data_String_Common.joinWith("&")(fromFoldable(map(printPart)(v))));
        };
    };
};
var ordValue = Data_Ord.ordString;
var ordQueryPairs = function (dictOrd) {
    var ordTuple = Data_Tuple.ordTuple(dictOrd);
    return function (dictOrd1) {
        return Data_Ord.ordArray(ordTuple(Data_Maybe.ordMaybe(dictOrd1)));
    };
};
var ordKey = Data_Ord.ordString;
var monoidValue = Data_Monoid.monoidString;
var monoidQueryPairs = Data_Monoid.monoidArray;
var monoidKey = Data_Monoid.monoidString;
var keyToString = function (v) {
    return fromJust(JSURI["decodeURIComponent"](v));
};
var keyPartChar = /* #__PURE__ */ alt(URI_Common.unreserved)(/* #__PURE__ */ Parsing_String_Basic.oneOf([ "!", "$", "'", "(", ")", "*", "+", ",", ":", "@", "/", "?" ]));
var valueFromString = /* #__PURE__ */ (function () {
    var $75 = URI_Common.printEncoded(keyPartChar);
    return function ($76) {
        return Value($75($76));
    };
})();
var valuePartChar = /* #__PURE__ */ alt(keyPartChar)(/* #__PURE__ */ Parsing_String["char"]("="));
var parsePart = function (parseK) {
    return function (parseV) {
        return bind(wrapParser(function ($77) {
            return parseK(Key($77));
        })(map1(joinWith(""))(someRec(alt(map1(Data_String_NonEmpty_CodeUnits.singleton)(keyPartChar))(URI_Common.pctEncoded)))))(function (key) {
            return bind(wrapParser(traverse(function ($78) {
                return parseV(Value($78));
            }))(Parsing_Combinators.optionMaybe(bind(Parsing_String["char"]("="))(function () {
                return map1(joinWith(""))(manyRec(alt(map1(Data_String_NonEmpty_CodeUnits.singleton)(valuePartChar))(URI_Common.pctEncoded)));
            }))))(function (value) {
                return pure(new Data_Tuple.Tuple(key, value));
            });
        });
    };
};
var parse = function (parseK) {
    return function (parseV) {
        var $79 = bimap(function (v) {
            return v.value0;
        })(QueryPairs);
        var $80 = Data_Function.flip(Parsing.runParser)(map1(fromFoldable1)(Parsing_Combinators.sepBy(parsePart(parseK)(parseV))(Parsing_String["char"]("&"))));
        return function ($81) {
            return $79($80(URI_Query.unsafeToString($81)));
        };
    };
};
var keyFromString = /* #__PURE__ */ (function () {
    var $82 = URI_Common.printEncoded(keyPartChar);
    return function ($83) {
        return Key($82($83));
    };
})();
var genericQueryPairs = {
    to: function (x) {
        return x;
    },
    from: function (x) {
        return x;
    }
};
var genericShow = /* #__PURE__ */ Data_Show_Generic.genericShow(genericQueryPairs);
var showQueryPairs = function (dictShow) {
    var showTuple = Data_Tuple.showTuple(dictShow);
    return function (dictShow1) {
        return {
            show: genericShow(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Show.showArray(showTuple(Data_Maybe.showMaybe(dictShow1)))))(QueryPairsIsSymbol))
        };
    };
};
var eqValue = Data_Eq.eqString;
var eqQueryPairs = function (dictEq) {
    var eqTuple = Data_Tuple.eqTuple(dictEq);
    return function (dictEq1) {
        return Data_Eq.eqArray(eqTuple(Data_Maybe.eqMaybe(dictEq1)));
    };
};
var eqKey = Data_Eq.eqString;
export {
    QueryPairs,
    parse,
    print,
    keyPartChar,
    valuePartChar,
    keyFromString,
    keyToString,
    unsafeKeyFromString,
    unsafeKeyToString,
    valueFromString,
    valueToString,
    unsafeValueFromString,
    unsafeValueToString,
    genericQueryPairs,
    eqQueryPairs,
    ordQueryPairs,
    semigroupQueryPairs,
    monoidQueryPairs,
    showQueryPairs,
    eqKey,
    ordKey,
    semigroupKey,
    monoidKey,
    showKey,
    eqValue,
    ordValue,
    semigroupValue,
    monoidValue,
    showValue
};
