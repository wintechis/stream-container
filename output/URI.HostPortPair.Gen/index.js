// Generated by purs version 0.15.10
import * as Control_Applicative from "../Control.Applicative/index.js";
import * as Control_Bind from "../Control.Bind/index.js";
import * as Control_Monad_Gen_Class from "../Control.Monad.Gen.Class/index.js";
import * as Data_Functor from "../Data.Functor/index.js";
import * as Data_Maybe from "../Data.Maybe/index.js";
import * as Data_These from "../Data.These/index.js";
import * as URI_Host_Gen from "../URI.Host.Gen/index.js";
import * as URI_Port_Gen from "../URI.Port.Gen/index.js";
var genHostPortPair = function (dictMonadGen) {
    var Monad0 = dictMonadGen.Monad0();
    var Bind1 = Monad0.Bind1();
    var bind = Control_Bind.bind(Bind1);
    var chooseFloat = Control_Monad_Gen_Class.chooseFloat(dictMonadGen);
    var map = Data_Functor.map((Bind1.Apply0()).Functor0());
    var pure = Control_Applicative.pure(Monad0.Applicative0());
    return function (host) {
        return function (port) {
            var sometimes = function (chance) {
                return function (g) {
                    return bind(chooseFloat(0.0)(1.0))(function (n) {
                        var $11 = n > chance;
                        if ($11) {
                            return map(Data_Maybe.Just.create)(g);
                        };
                        return pure(Data_Maybe.Nothing.value);
                    });
                };
            };
            return bind(sometimes(0.75)(host))(function (h) {
                return bind(sometimes(0.25)(port))(function (p) {
                    return pure((function () {
                        if (h instanceof Data_Maybe.Just && p instanceof Data_Maybe.Just) {
                            return new Data_Maybe.Just(new Data_These.Both(h.value0, p.value0));
                        };
                        if (h instanceof Data_Maybe.Just && p instanceof Data_Maybe.Nothing) {
                            return new Data_Maybe.Just(new Data_These.This(h.value0));
                        };
                        if (h instanceof Data_Maybe.Nothing && p instanceof Data_Maybe.Just) {
                            return new Data_Maybe.Just(new Data_These.That(p.value0));
                        };
                        if (h instanceof Data_Maybe.Nothing && p instanceof Data_Maybe.Nothing) {
                            return Data_Maybe.Nothing.value;
                        };
                        throw new Error("Failed pattern match at URI.HostPortPair.Gen (line 26, column 8 - line 30, column 32): " + [ h.constructor.name, p.constructor.name ]);
                    })());
                });
            });
        };
    };
};
export {
    genHostPortPair
};
export {
    genHost,
    genIPv4,
    genRegName
} from "../URI.Host.Gen/index.js";
export {
    genPort
} from "../URI.Port.Gen/index.js";
