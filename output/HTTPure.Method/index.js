// Generated by purs version 0.15.10
import * as Node_HTTP from "../Node.HTTP/index.js";
var Get = /* #__PURE__ */ (function () {
    function Get() {

    };
    Get.value = new Get();
    return Get;
})();
var Post = /* #__PURE__ */ (function () {
    function Post() {

    };
    Post.value = new Post();
    return Post;
})();
var Put = /* #__PURE__ */ (function () {
    function Put() {

    };
    Put.value = new Put();
    return Put;
})();
var Delete = /* #__PURE__ */ (function () {
    function Delete() {

    };
    Delete.value = new Delete();
    return Delete;
})();
var Head = /* #__PURE__ */ (function () {
    function Head() {

    };
    Head.value = new Head();
    return Head;
})();
var Connect = /* #__PURE__ */ (function () {
    function Connect() {

    };
    Connect.value = new Connect();
    return Connect;
})();
var Options = /* #__PURE__ */ (function () {
    function Options() {

    };
    Options.value = new Options();
    return Options;
})();
var Trace = /* #__PURE__ */ (function () {
    function Trace() {

    };
    Trace.value = new Trace();
    return Trace;
})();
var Patch = /* #__PURE__ */ (function () {
    function Patch() {

    };
    Patch.value = new Patch();
    return Patch;
})();
var showMethod = {
    show: function (v) {
        if (v instanceof Get) {
            return "Get";
        };
        if (v instanceof Post) {
            return "Post";
        };
        if (v instanceof Put) {
            return "Put";
        };
        if (v instanceof Delete) {
            return "Delete";
        };
        if (v instanceof Head) {
            return "Head";
        };
        if (v instanceof Connect) {
            return "Connect";
        };
        if (v instanceof Options) {
            return "Options";
        };
        if (v instanceof Trace) {
            return "Trace";
        };
        if (v instanceof Patch) {
            return "Patch";
        };
        throw new Error("Failed pattern match at HTTPure.Method (line 26, column 1 - line 35, column 23): " + [ v.constructor.name ]);
    }
};
var read = function ($9) {
    return (function (v) {
        if (v === "POST") {
            return Post.value;
        };
        if (v === "PUT") {
            return Put.value;
        };
        if (v === "DELETE") {
            return Delete.value;
        };
        if (v === "HEAD") {
            return Head.value;
        };
        if (v === "CONNECT") {
            return Connect.value;
        };
        if (v === "OPTIONS") {
            return Options.value;
        };
        if (v === "TRACE") {
            return Trace.value;
        };
        if (v === "PATCH") {
            return Patch.value;
        };
        return Get.value;
    })(Node_HTTP.requestMethod($9));
};
var eqMethod = {
    eq: function (x) {
        return function (y) {
            if (x instanceof Get && y instanceof Get) {
                return true;
            };
            if (x instanceof Post && y instanceof Post) {
                return true;
            };
            if (x instanceof Put && y instanceof Put) {
                return true;
            };
            if (x instanceof Delete && y instanceof Delete) {
                return true;
            };
            if (x instanceof Head && y instanceof Head) {
                return true;
            };
            if (x instanceof Connect && y instanceof Connect) {
                return true;
            };
            if (x instanceof Options && y instanceof Options) {
                return true;
            };
            if (x instanceof Trace && y instanceof Trace) {
                return true;
            };
            if (x instanceof Patch && y instanceof Patch) {
                return true;
            };
            return false;
        };
    }
};
export {
    Get,
    Post,
    Put,
    Delete,
    Head,
    Connect,
    Options,
    Trace,
    Patch,
    read,
    eqMethod,
    showMethod
};
