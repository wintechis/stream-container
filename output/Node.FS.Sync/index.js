// Generated by purs version 0.15.10
import * as $foreign from "./foreign.js";
import * as Data_DateTime_Instant from "../Data.DateTime.Instant/index.js";
import * as Data_EuclideanRing from "../Data.EuclideanRing/index.js";
import * as Data_Functor from "../Data.Functor/index.js";
import * as Data_Int from "../Data.Int/index.js";
import * as Data_Maybe from "../Data.Maybe/index.js";
import * as Data_Nullable from "../Data.Nullable/index.js";
import * as Data_Show from "../Data.Show/index.js";
import * as Effect from "../Effect/index.js";
import * as Node_Buffer from "../Node.Buffer/index.js";
import * as Node_Buffer_Class from "../Node.Buffer.Class/index.js";
import * as Node_Encoding from "../Node.Encoding/index.js";
import * as Node_FS from "../Node.FS/index.js";
import * as Node_FS_Perms from "../Node.FS.Perms/index.js";
import * as Node_FS_Stats from "../Node.FS.Stats/index.js";
var show = /* #__PURE__ */ Data_Show.show(Node_Encoding.showEncoding);
var div = /* #__PURE__ */ Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt);
var map = /* #__PURE__ */ Data_Functor.map(Effect.functorEffect);
var size = /* #__PURE__ */ Node_Buffer_Class.size(Node_Buffer.mutableBufferEffect);
var writeTextFile = function (encoding) {
    return function (file) {
        return function (text) {
            return function () {
                return $foreign.writeFileSyncImpl(file, text, {
                    encoding: show(encoding)
                });
            };
        };
    };
};
var writeFile = function (file) {
    return function (buff) {
        return function () {
            return $foreign.writeFileSyncImpl(file, buff, {});
        };
    };
};
var utimes = function (file) {
    return function (atime) {
        return function (mtime) {
            var toEpochMilliseconds = function ($13) {
                return Data_DateTime_Instant.unInstant(Data_DateTime_Instant.fromDateTime($13));
            };
            var ms = function (v) {
                return Data_Int.round(v);
            };
            var fromDate = function (date) {
                return div(ms(toEpochMilliseconds(date)))(1000);
            };
            return function () {
                return $foreign.utimesSyncImpl(file, fromDate(atime), fromDate(mtime));
            };
        };
    };
};
var unlink = function (file) {
    return function () {
        return $foreign.unlinkSyncImpl(file);
    };
};
var truncate = function (file) {
    return function (len) {
        return function () {
            return $foreign.truncateSyncImpl(file, len);
        };
    };
};
var symlink = function (src) {
    return function (dst) {
        return function (ty) {
            return function () {
                return $foreign.symlinkSyncImpl(src, dst, Node_FS.symlinkTypeToNode(ty));
            };
        };
    };
};
var stat = function (file) {
    return map(Node_FS_Stats.Stats.create)(function () {
        return $foreign.statSyncImpl(file);
    });
};
var rmdir$prime = function (path) {
    return function (opts) {
        return function () {
            return $foreign.rmdirSyncImpl(path, opts);
        };
    };
};
var rmdir = function (path) {
    return rmdir$prime(path)({
        maxRetries: 0,
        retryDelay: 100
    });
};
var rm$prime = function (path) {
    return function (opts) {
        return function () {
            return $foreign.rmSyncImpl(path, opts);
        };
    };
};
var rm = function (path) {
    return rm$prime(path)({
        force: false,
        maxRetries: 100,
        recursive: false,
        retryDelay: 1000
    });
};
var rename = function (oldFile) {
    return function (newFile) {
        return function () {
            return $foreign.renameSyncImpl(oldFile, newFile);
        };
    };
};
var realpath$prime = function (path) {
    return function (cache) {
        return function () {
            return $foreign.realpathSyncImpl(path, cache);
        };
    };
};
var realpath = function (path) {
    return function () {
        return $foreign.realpathSyncImpl(path, {});
    };
};
var readlink = function (path) {
    return function () {
        return $foreign.readlinkSyncImpl(path);
    };
};
var readdir = function (file) {
    return function () {
        return $foreign.readdirSyncImpl(file);
    };
};
var readTextFile = function (encoding) {
    return function (file) {
        return function () {
            return $foreign.readFileSyncImpl(file, {
                encoding: show(encoding)
            });
        };
    };
};
var readFile = function (file) {
    return function () {
        return $foreign.readFileSyncImpl(file, {});
    };
};
var mkdir$prime = function (file) {
    return function (v) {
        return function () {
            return $foreign.mkdirSyncImpl(file, {
                recursive: v.recursive,
                mode: Node_FS_Perms.permsToString(v.mode)
            });
        };
    };
};
var mkdir = function (path) {
    return mkdir$prime(path)({
        recursive: false,
        mode: Node_FS_Perms.mkPerms(Node_FS_Perms.all)(Node_FS_Perms.all)(Node_FS_Perms.all)
    });
};
var lstat = function (file) {
    return map(Node_FS_Stats.Stats.create)(function () {
        return $foreign.lstatSyncImpl(file);
    });
};
var link = function (src) {
    return function (dst) {
        return function () {
            return $foreign.linkSyncImpl(src, dst);
        };
    };
};
var fdWrite = function (fd) {
    return function (buff) {
        return function (off) {
            return function (len) {
                return function (pos) {
                    return function () {
                        return $foreign.writeSyncImpl(fd, buff, off, len, Data_Nullable.toNullable(pos));
                    };
                };
            };
        };
    };
};
var fdRead = function (fd) {
    return function (buff) {
        return function (off) {
            return function (len) {
                return function (pos) {
                    return function () {
                        return $foreign.readSyncImpl(fd, buff, off, len, Data_Nullable.toNullable(pos));
                    };
                };
            };
        };
    };
};
var fdOpen = function (file) {
    return function (flags) {
        return function (mode) {
            return function () {
                return $foreign.openSyncImpl(file, Node_FS.fileFlagsToNode(flags), Data_Nullable.toNullable(mode));
            };
        };
    };
};
var fdNext = function (fd) {
    return function (buff) {
        return function __do() {
            var sz = size(buff)();
            return fdRead(fd)(buff)(0)(sz)(Data_Maybe.Nothing.value)();
        };
    };
};
var fdFlush = function (fd) {
    return function () {
        return $foreign.fsyncSyncImpl(fd);
    };
};
var fdClose = function (fd) {
    return function () {
        return $foreign.closeSyncImpl(fd);
    };
};
var fdAppend = function (fd) {
    return function (buff) {
        return function __do() {
            var sz = size(buff)();
            return fdWrite(fd)(buff)(0)(sz)(Data_Maybe.Nothing.value)();
        };
    };
};
var exists = function (file) {
    return function () {
        return $foreign.existsSyncImpl(file);
    };
};
var chown = function (file) {
    return function (uid) {
        return function (gid) {
            return function () {
                return $foreign.chownSyncImpl(file, uid, gid);
            };
        };
    };
};
var chmod = function (file) {
    return function (perms) {
        return function () {
            return $foreign.chmodSyncImpl(file, Node_FS_Perms.permsToString(perms));
        };
    };
};
var appendTextFile = function (encoding) {
    return function (file) {
        return function (buff) {
            return function () {
                return $foreign.appendFileSyncImpl(file, buff, {
                    encoding: show(encoding)
                });
            };
        };
    };
};
var appendFile = function (file) {
    return function (buff) {
        return function () {
            return $foreign.appendFileSyncImpl(file, buff, {});
        };
    };
};
export {
    rename,
    truncate,
    chown,
    chmod,
    stat,
    lstat,
    link,
    symlink,
    readlink,
    realpath,
    realpath$prime,
    unlink,
    rmdir,
    rmdir$prime,
    rm,
    rm$prime,
    mkdir,
    mkdir$prime,
    readdir,
    utimes,
    readFile,
    readTextFile,
    writeFile,
    writeTextFile,
    appendFile,
    appendTextFile,
    exists,
    fdOpen,
    fdRead,
    fdNext,
    fdWrite,
    fdAppend,
    fdFlush,
    fdClose
};
