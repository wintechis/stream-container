// Generated by purs version 0.15.10
import * as Control_Apply from "../Control.Apply/index.js";
import * as Data_Array from "../Data.Array/index.js";
import * as Data_Eq from "../Data.Eq/index.js";
import * as Data_Functor from "../Data.Functor/index.js";
import * as Data_Generic_Rep from "../Data.Generic.Rep/index.js";
import * as Data_Identity from "../Data.Identity/index.js";
import * as Data_Lens_Lens from "../Data.Lens.Lens/index.js";
import * as Data_Maybe from "../Data.Maybe/index.js";
import * as Data_Ord from "../Data.Ord/index.js";
import * as Data_Ordering from "../Data.Ordering/index.js";
import * as Data_Show_Generic from "../Data.Show.Generic/index.js";
import * as Data_String_Common from "../Data.String.Common/index.js";
import * as Parsing from "../Parsing/index.js";
import * as Parsing_Combinators from "../Parsing.Combinators/index.js";
import * as Parsing_String from "../Parsing.String/index.js";
import * as URI_Common from "../URI.Common/index.js";
import * as URI_Fragment from "../URI.Fragment/index.js";
import * as URI_Query from "../URI.Query/index.js";
import * as URI_RelativePart from "../URI.RelativePart/index.js";
var map = /* #__PURE__ */ Data_Functor.map(Data_Maybe.functorMaybe);
var applyFirst = /* #__PURE__ */ Control_Apply.applyFirst(Parsing.applyParserT);
var apply = /* #__PURE__ */ Control_Apply.apply(Parsing.applyParserT);
var map1 = /* #__PURE__ */ Data_Functor.map(Parsing.functorParserT);
var wrapParser = /* #__PURE__ */ URI_Common.wrapParser(Data_Identity.monadIdentity);
var RelativeRefIsSymbol = {
    reflectSymbol: function () {
        return "RelativeRef";
    }
};
var RelativeRef = /* #__PURE__ */ (function () {
    function RelativeRef(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
    };
    RelativeRef.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return new RelativeRef(value0, value1, value2);
            };
        };
    };
    return RelativeRef;
})();
var print = function (opts) {
    return function (v) {
        return Data_String_Common.joinWith("")(Data_Array.catMaybes([ new Data_Maybe.Just(URI_RelativePart.print(opts)(v.value0)), map(function ($161) {
            return URI_Query.print(opts.printQuery($161));
        })(v.value1), map(function ($162) {
            return URI_Fragment.print(opts.printFragment($162));
        })(v.value2) ]));
    };
};
var parser = function (opts) {
    return applyFirst(apply(apply(map1(RelativeRef.create)(URI_RelativePart.parser(opts)))(Parsing_Combinators.optionMaybe(wrapParser(opts.parseQuery)(URI_Query.parser))))(Parsing_Combinators.optionMaybe(wrapParser(opts.parseFragment)(URI_Fragment.parser))))(Parsing_String.eof);
};
var genericRelativeRef = {
    to: function (x) {
        return new RelativeRef(x.value0, x.value1.value0, x.value1.value1);
    },
    from: function (x) {
        return new Data_Generic_Rep.Product(x.value0, new Data_Generic_Rep.Product(x.value1, x.value2));
    }
};
var genericShow = /* #__PURE__ */ Data_Show_Generic.genericShow(genericRelativeRef);
var showRelativeRef = function (dictShow) {
    var showRelativePart = URI_RelativePart.showRelativePart(dictShow);
    return function (dictShow1) {
        var showRelativePart1 = showRelativePart(dictShow1);
        return function (dictShow2) {
            var showRelativePart2 = showRelativePart1(dictShow2);
            return function (dictShow3) {
                var genericShowArgsProduct = Data_Show_Generic.genericShowArgsProduct(Data_Show_Generic.genericShowArgsArgument(showRelativePart2(dictShow3)));
                return function (dictShow4) {
                    var genericShowArgsProduct1 = Data_Show_Generic.genericShowArgsProduct(Data_Show_Generic.genericShowArgsArgument(Data_Maybe.showMaybe(dictShow4)));
                    return function (dictShow5) {
                        return {
                            show: genericShow(Data_Show_Generic.genericShowConstructor(genericShowArgsProduct(genericShowArgsProduct1(Data_Show_Generic.genericShowArgsArgument(Data_Maybe.showMaybe(dictShow5)))))(RelativeRefIsSymbol))
                        };
                    };
                };
            };
        };
    };
};
var eqRelativeRef = function (dictEq) {
    var eqRelativePart = URI_RelativePart.eqRelativePart(dictEq);
    return function (dictEq1) {
        var eqRelativePart1 = eqRelativePart(dictEq1);
        return function (dictEq2) {
            var eqRelativePart2 = eqRelativePart1(dictEq2);
            return function (dictEq3) {
                var eq = Data_Eq.eq(eqRelativePart2(dictEq3));
                return function (dictEq4) {
                    var eq1 = Data_Eq.eq(Data_Maybe.eqMaybe(dictEq4));
                    return function (dictEq5) {
                        var eq2 = Data_Eq.eq(Data_Maybe.eqMaybe(dictEq5));
                        return {
                            eq: function (x) {
                                return function (y) {
                                    return eq(x.value0)(y.value0) && eq1(x.value1)(y.value1) && eq2(x.value2)(y.value2);
                                };
                            }
                        };
                    };
                };
            };
        };
    };
};
var ordRelativeRef = function (dictOrd) {
    var ordRelativePart = URI_RelativePart.ordRelativePart(dictOrd);
    var eqRelativeRef1 = eqRelativeRef(dictOrd.Eq0());
    return function (dictOrd1) {
        var ordRelativePart1 = ordRelativePart(dictOrd1);
        var eqRelativeRef2 = eqRelativeRef1(dictOrd1.Eq0());
        return function (dictOrd2) {
            var ordRelativePart2 = ordRelativePart1(dictOrd2);
            var eqRelativeRef3 = eqRelativeRef2(dictOrd2.Eq0());
            return function (dictOrd3) {
                var compare = Data_Ord.compare(ordRelativePart2(dictOrd3));
                var eqRelativeRef4 = eqRelativeRef3(dictOrd3.Eq0());
                return function (dictOrd4) {
                    var compare1 = Data_Ord.compare(Data_Maybe.ordMaybe(dictOrd4));
                    var eqRelativeRef5 = eqRelativeRef4(dictOrd4.Eq0());
                    return function (dictOrd5) {
                        var compare2 = Data_Ord.compare(Data_Maybe.ordMaybe(dictOrd5));
                        var eqRelativeRef6 = eqRelativeRef5(dictOrd5.Eq0());
                        return {
                            compare: function (x) {
                                return function (y) {
                                    var v = compare(x.value0)(y.value0);
                                    if (v instanceof Data_Ordering.LT) {
                                        return Data_Ordering.LT.value;
                                    };
                                    if (v instanceof Data_Ordering.GT) {
                                        return Data_Ordering.GT.value;
                                    };
                                    var v1 = compare1(x.value1)(y.value1);
                                    if (v1 instanceof Data_Ordering.LT) {
                                        return Data_Ordering.LT.value;
                                    };
                                    if (v1 instanceof Data_Ordering.GT) {
                                        return Data_Ordering.GT.value;
                                    };
                                    return compare2(x.value2)(y.value2);
                                };
                            },
                            Eq0: function () {
                                return eqRelativeRef6;
                            }
                        };
                    };
                };
            };
        };
    };
};
var _relPart = function (dictStrong) {
    return Data_Lens_Lens.lens(function (v) {
        return v.value0;
    })(function (v) {
        return function (r) {
            return new RelativeRef(r, v.value1, v.value2);
        };
    })(dictStrong);
};
var _query = function (dictStrong) {
    return Data_Lens_Lens.lens(function (v) {
        return v.value1;
    })(function (v) {
        return function (q) {
            return new RelativeRef(v.value0, q, v.value2);
        };
    })(dictStrong);
};
var _fragment = function (dictStrong) {
    return Data_Lens_Lens.lens(function (v) {
        return v.value2;
    })(function (v) {
        return function (f) {
            return new RelativeRef(v.value0, v.value1, f);
        };
    })(dictStrong);
};
export {
    RelativeRef,
    parser,
    print,
    _relPart,
    _query,
    _fragment,
    eqRelativeRef,
    ordRelativeRef,
    genericRelativeRef,
    showRelativeRef
};
export {
    Authority,
    IPv4Address,
    IPv6Address,
    NameAddress,
    RelativePartAuth,
    RelativePartNoAuth,
    _IPv4Address,
    _IPv6Address,
    _NameAddress,
    _authority,
    _hosts,
    _path,
    _relPath,
    _userInfo
} from "../URI.RelativePart/index.js";
