// Generated by purs version 0.15.10
import * as Control_Alt from "../Control.Alt/index.js";
import * as Control_Applicative from "../Control.Applicative/index.js";
import * as Control_Apply from "../Control.Apply/index.js";
import * as Control_Bind from "../Control.Bind/index.js";
import * as Data_Either from "../Data.Either/index.js";
import * as Data_Function from "../Data.Function/index.js";
import * as Data_Functor from "../Data.Functor/index.js";
import * as Data_List from "../Data.List/index.js";
import * as Data_List_Types from "../Data.List.Types/index.js";
import * as Data_Maybe from "../Data.Maybe/index.js";
import * as Data_Show from "../Data.Show/index.js";
import * as Data_String_NonEmpty_CodeUnits from "../Data.String.NonEmpty.CodeUnits/index.js";
import * as Data_String_NonEmpty_Internal from "../Data.String.NonEmpty.Internal/index.js";
import * as Parsing from "../Parsing/index.js";
import * as Parsing_String from "../Parsing.String/index.js";
import * as Partial_Unsafe from "../Partial.Unsafe/index.js";
import * as URI_Common from "../URI.Common/index.js";
var show = /* #__PURE__ */ Data_Show.show(Data_Show.showString);
var bind = /* #__PURE__ */ Control_Bind.bind(Parsing.bindParserT);
var map = /* #__PURE__ */ Data_Functor.map(Parsing.functorParserT);
var joinWith = /* #__PURE__ */ Data_String_NonEmpty_Internal.joinWith(Data_List_Types.foldableList);
var manyRec = /* #__PURE__ */ Data_List.manyRec(Parsing.monadRecParserT)(Parsing.alternativeParserT);
var alt = /* #__PURE__ */ Control_Alt.alt(Parsing.altParserT);
var pure = /* #__PURE__ */ Control_Applicative.pure(Parsing.applicativeParserT);
var applyFirst = /* #__PURE__ */ Control_Apply.applyFirst(Parsing.applyParserT);
var Scheme = function (x) {
    return x;
};
var toString = function (v) {
    return v;
};
var showScheme = {
    show: function (v) {
        return "(Scheme.unsafeFromString " + (show(Data_String_NonEmpty_Internal.toString(v)) + ")");
    }
};
var print = function (v) {
    return Data_String_NonEmpty_Internal.toString(v) + ":";
};
var parseScheme = /* #__PURE__ */ bind(URI_Common.alpha)(function (init) {
    return bind(map(joinWith(""))(manyRec(map(Data_String_NonEmpty_CodeUnits.singleton)(alt(URI_Common.alphaNum)(alt(Parsing_String["char"]("+"))(alt(Parsing_String["char"]("-"))(Parsing_String["char"]("."))))))))(function (rest) {
        return pure(Data_String_NonEmpty_Internal.appendString(Data_String_NonEmpty_CodeUnits.singleton(init))(rest));
    });
});
var parser = /* #__PURE__ */ applyFirst(/* #__PURE__ */ map(Scheme)(parseScheme))(/* #__PURE__ */ Parsing_String["char"](":"));
var ordScheme = Data_String_NonEmpty_Internal.ordNonEmptyString;
var fromString = /* #__PURE__ */ (function () {
    var $21 = Data_Functor.map(Data_Maybe.functorMaybe)(Scheme);
    var $22 = Data_Function.flip(Parsing.runParser)(applyFirst(parseScheme)(Parsing_String.eof));
    return function ($23) {
        return $21(Data_Either.hush($22($23)));
    };
})();
var unsafeFromString = function (s) {
    var v = fromString(s);
    if (v instanceof Data_Maybe.Just) {
        return v.value0;
    };
    if (v instanceof Data_Maybe.Nothing) {
        return Partial_Unsafe.unsafeCrashWith("Scheme value is invalid: `" + (show(s) + "`"));
    };
    throw new Error("Failed pattern match at URI.Scheme (line 61, column 22 - line 63, column 77): " + [ v.constructor.name ]);
};
var eqScheme = Data_String_NonEmpty_Internal.eqNonEmptyString;
export {
    fromString,
    toString,
    unsafeFromString,
    parser,
    print,
    eqScheme,
    ordScheme,
    showScheme
};
