// Generated by purs version 0.15.10
import * as Control_Alt from "../Control.Alt/index.js";
import * as Control_Applicative from "../Control.Applicative/index.js";
import * as Control_Bind from "../Control.Bind/index.js";
import * as Data_Array from "../Data.Array/index.js";
import * as Data_Array_NonEmpty from "../Data.Array.NonEmpty/index.js";
import * as Data_Array_NonEmpty_Internal from "../Data.Array.NonEmpty.Internal/index.js";
import * as Data_Functor from "../Data.Functor/index.js";
import * as Data_Identity from "../Data.Identity/index.js";
import * as Data_List_Types from "../Data.List.Types/index.js";
import * as Data_Maybe from "../Data.Maybe/index.js";
import * as Data_String_Common from "../Data.String.Common/index.js";
import * as Data_String_NonEmpty_CodeUnits from "../Data.String.NonEmpty.CodeUnits/index.js";
import * as Data_String_NonEmpty_Internal from "../Data.String.NonEmpty.Internal/index.js";
import * as Data_These from "../Data.These/index.js";
import * as Parsing from "../Parsing/index.js";
import * as Parsing_Combinators from "../Parsing.Combinators/index.js";
import * as Parsing_String from "../Parsing.String/index.js";
import * as Parsing_String_Basic from "../Parsing.String.Basic/index.js";
import * as URI_Common from "../URI.Common/index.js";
import * as URI_Host from "../URI.Host/index.js";
import * as URI_Host_IPv4Address from "../URI.Host.IPv4Address/index.js";
import * as URI_Host_IPv6Address from "../URI.Host.IPv6Address/index.js";
import * as URI_Host_RegName from "../URI.Host.RegName/index.js";
import * as URI_HostPortPair from "../URI.HostPortPair/index.js";
import * as URI_Port from "../URI.Port/index.js";
var map = /* #__PURE__ */ Data_Functor.map(Data_Functor.functorArray);
var alt = /* #__PURE__ */ Control_Alt.alt(Parsing.altParserT);
var map1 = /* #__PURE__ */ Data_Functor.map(Parsing.functorParserT);
var wrapParser = /* #__PURE__ */ URI_Common.wrapParser(Data_Identity.monadIdentity);
var bind = /* #__PURE__ */ Control_Bind.bind(Parsing.bindParserT);
var pure = /* #__PURE__ */ Control_Applicative.pure(Parsing.applicativeParserT);
var fromFoldable = /* #__PURE__ */ Data_Array.fromFoldable(Data_List_Types.foldableList);
var print = function (printHost) {
    return function (printPort) {
        var $17 = Data_String_Common.joinWith(",");
        var $18 = map((function () {
            var $20 = URI_HostPortPair.print(printHost)(printPort);
            return function ($21) {
                return $20(Data_Maybe.Just.create($21));
            };
        })());
        return function ($19) {
            return $17($18($19));
        };
    };
};
var parseRegName$prime = /* #__PURE__ */ (function () {
    var c = alt(URI_Common.unreserved)(Parsing_String_Basic.oneOf([ "!", "$", "&", "'", "(", ")", "*", "+", ";", "=" ]));
    var p = alt(URI_Common.pctEncoded)(map1(Data_String_NonEmpty_CodeUnits.singleton)(c));
    return map1((function () {
        var $22 = Data_String_NonEmpty_Internal.join1With(Data_Array_NonEmpty_Internal.foldable1NonEmptyArray)("");
        return function ($23) {
            return URI_Host_RegName.unsafeFromString($22($23));
        };
    })())(Data_Array_NonEmpty.some(Parsing.alternativeParserT)(Parsing.lazyParserT)(p));
})();
var parseHost$prime = function (p) {
    return wrapParser(p)(alt(map1(URI_Host.IPv6Address.create)(URI_Host_IPv6Address.parser))(alt(Parsing_Combinators["try"](map1(URI_Host.IPv4Address.create)(URI_Host_IPv4Address.parser)))(map1(URI_Host.NameAddress.create)(parseRegName$prime))));
};
var parsePair = function (parseHost) {
    return function (parsePort) {
        return bind(Parsing_Combinators.optionMaybe(parseHost$prime(parseHost)))(function (mh) {
            return bind(Parsing_Combinators.optionMaybe(wrapParser(parsePort)(URI_Port.parser)))(function (mp) {
                if (mh instanceof Data_Maybe.Just && mp instanceof Data_Maybe.Nothing) {
                    return pure(new Data_These.This(mh.value0));
                };
                if (mh instanceof Data_Maybe.Nothing && mp instanceof Data_Maybe.Just) {
                    return pure(new Data_These.That(mp.value0));
                };
                if (mh instanceof Data_Maybe.Just && mp instanceof Data_Maybe.Just) {
                    return pure(new Data_These.Both(mh.value0, mp.value0));
                };
                if (mh instanceof Data_Maybe.Nothing && mp instanceof Data_Maybe.Nothing) {
                    return Parsing.fail("Neither host nor port present");
                };
                throw new Error("Failed pattern match at URI.Extra.MultiHostPortPair (line 61, column 3 - line 65, column 61): " + [ mh.constructor.name, mp.constructor.name ]);
            });
        });
    };
};
var parser = function (parseHost) {
    return function (parsePort) {
        return map1(fromFoldable)(Parsing_Combinators.sepBy(parsePair(parseHost)(parsePort))(Parsing_String["char"](",")));
    };
};
export {
    parser,
    print
};
