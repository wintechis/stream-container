// Generated by purs version 0.15.10
import * as Control_Applicative from "../Control.Applicative/index.js";
import * as Control_Bind from "../Control.Bind/index.js";
import * as Control_Monad_Gen from "../Control.Monad.Gen/index.js";
import * as Control_Monad_Gen_Class from "../Control.Monad.Gen.Class/index.js";
import * as Data_Char_Gen from "../Data.Char.Gen/index.js";
import * as Data_Functor from "../Data.Functor/index.js";
import * as Data_String_Gen from "../Data.String.Gen/index.js";
import * as Data_String_NonEmpty_CodeUnits from "../Data.String.NonEmpty.CodeUnits/index.js";
import * as URI_Host from "../URI.Host/index.js";
import * as URI_Host_IPv4Address from "../URI.Host.IPv4Address/index.js";
import * as URI_Host_RegName from "../URI.Host.RegName/index.js";
var genRegName = function (dictMonadGen) {
    var choose = Control_Monad_Gen.choose(dictMonadGen);
    var genAlpha = Data_Char_Gen.genAlpha(dictMonadGen);
    var genDigitChar = Data_Char_Gen.genDigitChar(dictMonadGen);
    var Monad0 = dictMonadGen.Monad0();
    var bind = Control_Bind.bind(Monad0.Bind1());
    var pure = Control_Applicative.pure(Monad0.Applicative0());
    return function (dictMonadRec) {
        var genString = Data_String_Gen.genString(dictMonadRec)(dictMonadGen);
        var genAlphaNumeric = choose(genAlpha)(genDigitChar);
        return bind(genAlphaNumeric)(function (head) {
            return bind(genString(genAlphaNumeric))(function (tail) {
                return pure(URI_Host_RegName.fromString(Data_String_NonEmpty_CodeUnits.cons(head)(tail)));
            });
        });
    };
};
var genIPv4 = function (dictMonadGen) {
    var Monad0 = dictMonadGen.Monad0();
    var bind = Control_Bind.bind(Monad0.Bind1());
    var chooseInt = Control_Monad_Gen_Class.chooseInt(dictMonadGen);
    var pure = Control_Applicative.pure(Monad0.Applicative0());
    return bind(chooseInt(0)(255))(function (a) {
        return bind(chooseInt(0)(255))(function (b) {
            return bind(chooseInt(0)(255))(function (c) {
                return bind(chooseInt(0)(255))(function (d) {
                    return pure(URI_Host_IPv4Address.unsafeFromInts(a)(b)(c)(d));
                });
            });
        });
    });
};
var genHost = function (dictMonadGen) {
    var choose = Control_Monad_Gen.choose(dictMonadGen);
    var map = Data_Functor.map((((dictMonadGen.Monad0()).Bind1()).Apply0()).Functor0());
    var genRegName1 = genRegName(dictMonadGen);
    var genIPv41 = genIPv4(dictMonadGen);
    return function (dictMonadRec) {
        return choose(map(URI_Host.NameAddress.create)(genRegName1(dictMonadRec)))(map(URI_Host.IPv4Address.create)(genIPv41));
    };
};
export {
    genIPv4,
    genRegName,
    genHost
};
