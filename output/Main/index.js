// Generated by purs version 0.15.10
import * as CLI from "../CLI/index.js";
import * as Control_Applicative from "../Control.Applicative/index.js";
import * as Control_Apply from "../Control.Apply/index.js";
import * as Control_Bind from "../Control.Bind/index.js";
import * as Control_Monad_Error_Class from "../Control.Monad.Error.Class/index.js";
import * as Data_Array from "../Data.Array/index.js";
import * as Data_DateTime from "../Data.DateTime/index.js";
import * as Data_Either from "../Data.Either/index.js";
import * as Data_Enum from "../Data.Enum/index.js";
import * as Data_Eq from "../Data.Eq/index.js";
import * as Data_Foldable from "../Data.Foldable/index.js";
import * as Data_Formatter_DateTime from "../Data.Formatter.DateTime/index.js";
import * as Data_Functor from "../Data.Functor/index.js";
import * as Data_Identity from "../Data.Identity/index.js";
import * as Data_Int from "../Data.Int/index.js";
import * as Data_Lens_Fold from "../Data.Lens.Fold/index.js";
import * as Data_Lens_Internal_Forget from "../Data.Lens.Internal.Forget/index.js";
import * as Data_Lens_Internal_Wander from "../Data.Lens.Internal.Wander/index.js";
import * as Data_Lens_Prism from "../Data.Lens.Prism/index.js";
import * as Data_Lens_Prism_Maybe from "../Data.Lens.Prism.Maybe/index.js";
import * as Data_Lens_Setter from "../Data.Lens.Setter/index.js";
import * as Data_List_Types from "../Data.List.Types/index.js";
import * as Data_Map_Internal from "../Data.Map.Internal/index.js";
import * as Data_Maybe from "../Data.Maybe/index.js";
import * as Data_Maybe_First from "../Data.Maybe.First/index.js";
import * as Data_Monoid from "../Data.Monoid/index.js";
import * as Data_Number from "../Data.Number/index.js";
import * as Data_Ord from "../Data.Ord/index.js";
import * as Data_Profunctor_Strong from "../Data.Profunctor.Strong/index.js";
import * as Data_Semigroup from "../Data.Semigroup/index.js";
import * as Data_Semiring from "../Data.Semiring/index.js";
import * as Data_Set from "../Data.Set/index.js";
import * as Data_Show from "../Data.Show/index.js";
import * as Data_String_CaseInsensitive from "../Data.String.CaseInsensitive/index.js";
import * as Data_String_Common from "../Data.String.Common/index.js";
import * as Data_These from "../Data.These/index.js";
import * as Data_Time from "../Data.Time/index.js";
import * as Data_Time_Component from "../Data.Time.Component/index.js";
import * as Data_Time_Duration from "../Data.Time.Duration/index.js";
import * as Data_Traversable from "../Data.Traversable/index.js";
import * as Data_Tuple from "../Data.Tuple/index.js";
import * as Data_Unit from "../Data.Unit/index.js";
import * as Effect from "../Effect/index.js";
import * as Effect_Aff from "../Effect.Aff/index.js";
import * as Effect_Aff_Class from "../Effect.Aff.Class/index.js";
import * as Effect_Class from "../Effect.Class/index.js";
import * as Effect_Console from "../Effect.Console/index.js";
import * as Effect_Exception from "../Effect.Exception/index.js";
import * as Effect_Now from "../Effect.Now/index.js";
import * as Effect_Ref from "../Effect.Ref/index.js";
import * as Effect_Timer from "../Effect.Timer/index.js";
import * as HTTPure_Body from "../HTTPure.Body/index.js";
import * as HTTPure_Headers from "../HTTPure.Headers/index.js";
import * as HTTPure_Lookup from "../HTTPure.Lookup/index.js";
import * as HTTPure_Method from "../HTTPure.Method/index.js";
import * as HTTPure_Response from "../HTTPure.Response/index.js";
import * as HTTPure_Server from "../HTTPure.Server/index.js";
import * as N3 from "../N3/index.js";
import * as Options_Applicative_Extra from "../Options.Applicative.Extra/index.js";
import * as Parsing from "../Parsing/index.js";
import * as RDF from "../RDF/index.js";
import * as RDF_Prefixes from "../RDF.Prefixes/index.js";
import * as URI_Authority from "../URI.Authority/index.js";
import * as URI_HierarchicalPart from "../URI.HierarchicalPart/index.js";
import * as URI_Path_Segment from "../URI.Path.Segment/index.js";
import * as URI_Port from "../URI.Port/index.js";
import * as URI_URI from "../URI.URI/index.js";
var discard = /* #__PURE__ */ Control_Bind.discard(Control_Bind.discardUnit);
var show = /* #__PURE__ */ Data_Show.show(HTTPure_Method.showMethod);
var show1 = /* #__PURE__ */ Data_Show.show(Data_Show.showInt);
var bind = /* #__PURE__ */ Control_Bind.bind(Data_Maybe.bindMaybe);
var map = /* #__PURE__ */ Data_Functor.map(Data_Maybe.functorMaybe);
var eq = /* #__PURE__ */ Data_Eq.eq(RDF.eqTerm);
var pure = /* #__PURE__ */ Control_Applicative.pure(Data_Maybe.applicativeMaybe);
var filter = /* #__PURE__ */ Data_Set.filter(RDF.ordQuad);
var unformatParser = /* #__PURE__ */ Data_Formatter_DateTime.unformatParser(Data_Identity.monadIdentity);
var adjust = /* #__PURE__ */ Data_DateTime.adjust(Data_Time_Duration.durationSeconds);
var negateDuration = /* #__PURE__ */ Data_Time_Duration.negateDuration(Data_Time_Duration.durationSeconds);
var lessThanOrEq = /* #__PURE__ */ Data_Ord.lessThanOrEq(Data_DateTime.ordDateTime);
var greaterThanOrEq = /* #__PURE__ */ Data_Ord.greaterThanOrEq(Data_DateTime.ordDateTime);
var fromFoldable = /* #__PURE__ */ Data_Array.fromFoldable(Data_Set.foldableSet);
var lessThan = /* #__PURE__ */ Data_Ord.lessThan(Data_Time_Duration.ordSeconds);
var diff = /* #__PURE__ */ Data_DateTime.diff(Data_Time_Duration.durationSeconds);
var union = /* #__PURE__ */ Data_Set.union(Data_DateTime.ordDateTime);
var difference = /* #__PURE__ */ Data_Set.difference(Data_DateTime.ordDateTime);
var fromFoldable1 = /* #__PURE__ */ Data_Set.fromFoldable(Data_Foldable.foldableArray);
var fromFoldable2 = /* #__PURE__ */ fromFoldable1(Data_DateTime.ordDateTime);
var foldl = /* #__PURE__ */ Data_Foldable.foldl(Data_Foldable.foldableArray);
var union1 = /* #__PURE__ */ Data_Set.union(RDF.ordQuad);
var map1 = /* #__PURE__ */ Data_Functor.map(Data_Functor.functorArray);
var append1 = /* #__PURE__ */ Data_Semigroup.append(Data_Semigroup.semigroupArray);
var map2 = /* #__PURE__ */ Data_Functor.map(Data_Functor.functorFn);
var add = /* #__PURE__ */ Data_Semiring.add(Data_Semiring.semiringInt);
var map3 = /* #__PURE__ */ Data_Set.map(Data_Time_Duration.ordSeconds);
var fromFoldable3 = /* #__PURE__ */ fromFoldable1(CLI.ordWindow);
var lessThan1 = /* #__PURE__ */ Data_Ord.lessThan(Data_DateTime.ordDateTime);
var pure1 = /* #__PURE__ */ Control_Applicative.pure(Effect.applicativeEffect);
var fromFoldable4 = /* #__PURE__ */ fromFoldable1(RDF.ordQuad);
var show2 = /* #__PURE__ */ Data_Show.show(RDF.showQuad);
var map4 = /* #__PURE__ */ Data_Functor.map(Effect.functorEffect);
var fold = /* #__PURE__ */ Data_Array.fold(Data_Monoid.monoidUnit);
var sequence = /* #__PURE__ */ Data_Traversable.sequence(Data_Traversable.traversableArray)(Effect.applicativeEffect);
var lookup = /* #__PURE__ */ Data_Map_Internal.lookup(Data_String_CaseInsensitive.ordCaseInsensitiveString);
var bind2 = /* #__PURE__ */ Control_Bind.bind(Effect_Aff.bindAff);
var $$try = /* #__PURE__ */ Control_Monad_Error_Class["try"](Effect_Aff.monadErrorAff);
var discard2 = /* #__PURE__ */ discard(Effect_Aff.bindAff);
var internalServerError = /* #__PURE__ */ HTTPure_Response.internalServerError(Effect_Aff_Class.monadAffAff)(HTTPure_Body.bodyString);
var ok$prime = /* #__PURE__ */ HTTPure_Response["ok$prime"](Effect_Aff_Class.monadAffAff)(HTTPure_Body.bodyString);
var liftEffect = /* #__PURE__ */ Effect_Class.liftEffect(Effect_Aff.monadEffectAff);
var apply = /* #__PURE__ */ Control_Apply.apply(Data_Maybe.applyMaybe);
var toEnum = /* #__PURE__ */ Data_Enum.toEnum(Data_Time_Component.boundedEnumMillisecond);
var badRequest = /* #__PURE__ */ HTTPure_Response.badRequest(Effect_Aff_Class.monadAffAff)(HTTPure_Body.bodyString);
var _hierPart = /* #__PURE__ */ URI_URI["_hierPart"](Data_Profunctor_Strong.strongFn);
var _path = /* #__PURE__ */ URI_HierarchicalPart["_path"](Data_Lens_Internal_Wander.wanderFunction);
var created = /* #__PURE__ */ HTTPure_Response.created(Effect_Aff_Class.monadAffAff);
var at = /* #__PURE__ */ HTTPure_Lookup.at(Data_Monoid.monoidString)(HTTPure_Lookup.lookupArray);
var notFound = /* #__PURE__ */ HTTPure_Response.notFound(Effect_Aff_Class.monadAffAff);
var _hierPart1 = /* #__PURE__ */ URI_URI["_hierPart"](Data_Lens_Internal_Forget.strongForget);
var _authority = /* #__PURE__ */ URI_HierarchicalPart["_authority"](/* #__PURE__ */ Data_Lens_Internal_Forget.wanderForget(Data_Maybe_First.monoidFirst));
var _hosts = /* #__PURE__ */ URI_Authority["_hosts"](Data_Lens_Internal_Forget.strongForget);
var choiceForget = /* #__PURE__ */ Data_Lens_Internal_Forget.choiceForget(Data_Maybe_First.monoidFirst);
var _Just = /* #__PURE__ */ Data_Lens_Prism_Maybe["_Just"](choiceForget);
var fromFoldable5 = /* #__PURE__ */ Data_Array.fromFoldable(Data_List_Types.foldableList);
var foldr = /* #__PURE__ */ Data_Foldable.foldr(Data_List_Types.foldableList);
var StreamContainer = /* #__PURE__ */ (function () {
    function StreamContainer(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    StreamContainer.create = function (value0) {
        return function (value1) {
            return new StreamContainer(value0, value1);
        };
    };
    return StreamContainer;
})();
var nextGraphId = function (v) {
    return Data_Array.length(v.value0);
};
var mimeForFormat = function (v) {
    if (v instanceof N3.Turtle) {
        return "text/turtle";
    };
    if (v instanceof N3.TriG) {
        return "application/trig";
    };
    if (v instanceof N3.NTriples) {
        return "application/n-triples";
    };
    if (v instanceof N3.NQuads) {
        return "application/n-quads";
    };
    throw new Error("Failed pattern match at Main (line 189, column 1 - line 189, column 34): " + [ v.constructor.name ]);
};
var logWarn = function (dictMonadAff) {
    var MonadEffect0 = dictMonadAff.MonadEffect0();
    var bind3 = Control_Bind.bind((MonadEffect0.Monad0()).Bind1());
    var liftEffect1 = Effect_Class.liftEffect(MonadEffect0);
    return function (message) {
        return bind3(liftEffect1(Effect_Now.nowDateTime))(function (time) {
            return liftEffect1(Effect_Console.log("[WARN]\x09[" + (Data_Formatter_DateTime.format(new Data_List_Types.Cons(Data_Formatter_DateTime.UnixTimestamp.value, Data_List_Types.Nil.value))(time) + ("] " + message))));
        });
    };
};
var logWarn1 = /* #__PURE__ */ logWarn(Effect_Aff_Class.monadAffAff);
var logInfo = function (dictMonadAff) {
    var MonadEffect0 = dictMonadAff.MonadEffect0();
    var bind3 = Control_Bind.bind((MonadEffect0.Monad0()).Bind1());
    var liftEffect1 = Effect_Class.liftEffect(MonadEffect0);
    return function (message) {
        return bind3(liftEffect1(Effect_Now.nowDateTime))(function (time) {
            return liftEffect1(Effect_Console.log("[INFO]\x09[" + (Data_Formatter_DateTime.format(new Data_List_Types.Cons(Data_Formatter_DateTime.UnixTimestamp.value, Data_List_Types.Nil.value))(time) + ("] " + message))));
        });
    };
};
var logError = function (dictMonadAff) {
    var MonadEffect0 = dictMonadAff.MonadEffect0();
    var bind3 = Control_Bind.bind((MonadEffect0.Monad0()).Bind1());
    var liftEffect1 = Effect_Class.liftEffect(MonadEffect0);
    return function (message) {
        return bind3(liftEffect1(Effect_Now.nowDateTime))(function (time) {
            return liftEffect1(Effect_Console.log("[ERROR]\x09[" + (Data_Formatter_DateTime.format(new Data_List_Types.Cons(Data_Formatter_DateTime.UnixTimestamp.value, Data_List_Types.Nil.value))(time) + ("] " + message))));
        });
    };
};
var logError1 = /* #__PURE__ */ logError(Effect_Aff_Class.monadAffAff);
var logDebug = function (dictMonadAff) {
    var MonadEffect0 = dictMonadAff.MonadEffect0();
    var bind3 = Control_Bind.bind((MonadEffect0.Monad0()).Bind1());
    var liftEffect1 = Effect_Class.liftEffect(MonadEffect0);
    return function (message) {
        return bind3(liftEffect1(Effect_Now.nowDateTime))(function (time) {
            return liftEffect1(Effect_Console.log("[DEBUG]\x09[" + (Data_Formatter_DateTime.format(new Data_List_Types.Cons(Data_Formatter_DateTime.UnixTimestamp.value, Data_List_Types.Nil.value))(time) + ("] " + message))));
        });
    };
};
var logDebug1 = /* #__PURE__ */ logDebug(Effect_Aff_Class.monadAffAff);
var logResponse = function (dictMonadAff) {
    var Bind1 = ((dictMonadAff.MonadEffect0()).Monad0()).Bind1();
    var bind3 = Control_Bind.bind(Bind1);
    var discard3 = discard(Bind1);
    var logDebug2 = logDebug(dictMonadAff);
    return function (v) {
        return function (response) {
            return bind3(response)(function (v1) {
                return discard3(logDebug2(Data_String_Common.toUpper(show(v.method)) + (" /" + (Data_String_Common.joinWith("/")(v.path) + (" " + show1(v1.status))))))(function () {
                    return response;
                });
            });
        };
    };
};
var logResponse1 = /* #__PURE__ */ logResponse(Effect_Aff_Class.monadAffAff);
var ldpsc = "https://solid.ti.rw.fau.de/public/ns/stream-containers#";
var quadsToWindow = function (quads) {
    return bind(map(RDF.object)(Data_Array.head(Data_Array.filter(function (quad) {
        return eq(RDF.predicate(quad))(RDF["namedNode$prime"](RDF_Prefixes.ldp)("hasMembershipResource"));
    })(quads))))(function (membershipResource) {
        return bind(Data_Array.head(Data_Array.filter(function (quad) {
            return eq(RDF.predicate(quad))(RDF["namedNode$prime"](ldpsc)("start"));
        })(quads)))(function (startQuad) {
            return bind(map(Data_Time_Duration.Seconds)(Data_Number.fromString(RDF.value(RDF.object(startQuad)))))(function (start) {
                return bind(Data_Array.head(Data_Array.filter(function (quad) {
                    return eq(RDF.predicate(quad))(RDF["namedNode$prime"](ldpsc)("end"));
                })(quads)))(function (endQuad) {
                    return bind(map(Data_Time_Duration.Seconds)(Data_Number.fromString(RDF.value(RDF.object(endQuad)))))(function (end) {
                        return pure(new CLI.Window({
                            membershipResource: membershipResource,
                            start: start,
                            end: end
                        }));
                    });
                });
            });
        });
    });
};
var windowToQuads = function (i) {
    return function (v) {
        var windowBN = RDF.blankNode("window-" + show1(i));
        var secondsToLiteral = function (v1) {
            return RDF.literalType(show1(Data_Int.round(v1)))(RDF["namedNode$prime"](RDF_Prefixes.xsd)("integer"));
        };
        return [ RDF.quad(RDF.namedNode(""))(RDF["namedNode$prime"](ldpsc)("window"))(windowBN)(RDF.defaultGraph), RDF.quad(windowBN)(RDF["namedNode$prime"](RDF_Prefixes.ldp)("hasMembershipResource"))(v.value0.membershipResource)(RDF.defaultGraph), RDF.quad(windowBN)(RDF["namedNode$prime"](ldpsc)("startDuration"))(secondsToLiteral(v.value0.start))(RDF.defaultGraph), RDF.quad(windowBN)(RDF["namedNode$prime"](ldpsc)("endDuration"))(secondsToLiteral(v.value0.end))(RDF.defaultGraph) ];
    };
};
var isGraphInWindow = function (now) {
    return function (contentTimestampRelation) {
        return function (start) {
            return function (end) {
                return function (v) {
                    return Data_Maybe.fromMaybe(false)(bind(Data_Set.findMax(filter(function (q) {
                        return eq(RDF.predicate(q))(contentTimestampRelation);
                    })(v.value1)))(function (quad) {
                        return bind(Data_Either.hush(Parsing.runParser(RDF.value(RDF.object(quad)))(unformatParser(new Data_List_Types.Cons(Data_Formatter_DateTime.UnixTimestamp.value, Data_List_Types.Nil.value)))))(function (timestamp) {
                            return bind(adjust(negateDuration(start))(now))(function (windowStart) {
                                return bind(adjust(negateDuration(end))(now))(function (windowEnd) {
                                    return pure(lessThanOrEq(timestamp)(windowStart) && greaterThanOrEq(timestamp)(windowEnd));
                                });
                            });
                        });
                    }));
                };
            };
        };
    };
};
var poisonedQuads = function (opts) {
    return function (now) {
        return function (graphArray) {
            return function (v) {
                var inWindow = Data_Array.filter(isGraphInWindow(now)(opts.contentTimestampRelation)(v.value0.start)(v.value0.end))(graphArray);
                var getPoisonedTimestamp = function (graph) {
                    var v1 = Data_Array.find(function (q) {
                        return eq(RDF.predicate(q))(opts.contentPoisonRelation) && eq(RDF.object(q))(RDF.literalType("true")(RDF["namedNode$prime"](RDF_Prefixes.xsd)("boolean")));
                    })(fromFoldable(Data_Tuple.snd(graph)));
                    if (v1 instanceof Data_Maybe.Nothing) {
                        return Data_Maybe.Nothing.value;
                    };
                    if (v1 instanceof Data_Maybe.Just) {
                        return bind(Data_Array.find(function (q) {
                            return eq(RDF.predicate(q))(opts.contentTimestampRelation);
                        })(fromFoldable(Data_Tuple.snd(graph))))(function (q) {
                            return Data_Either.hush(Parsing.runParser(RDF.value(RDF.object(q)))(unformatParser(new Data_List_Types.Cons(Data_Formatter_DateTime.UnixTimestamp.value, Data_List_Types.Nil.value))));
                        });
                    };
                    throw new Error("Failed pattern match at Main (line 138, column 34 - line 142, column 83): " + [ v1.constructor.name ]);
                };
                var allTimestampsInWindow = function (start) {
                    return function (end) {
                        var $165 = lessThan(diff(start)(end))(0.0);
                        if ($165) {
                            return Data_Set.empty;
                        };
                        return union(Data_Set.singleton(start))(allTimestampsInWindow(Data_Maybe.fromMaybe(start)(adjust(negateDuration(1.0))(start)))(end));
                    };
                };
                var $166 = Data_Set.size(difference(allTimestampsInWindow(Data_Maybe.fromMaybe(now)(adjust(negateDuration(v.value0.start))(now)))(Data_Maybe.fromMaybe(now)(adjust(negateDuration(v.value0.end))(now))))(fromFoldable2(Data_Array.mapMaybe(getPoisonedTimestamp)(inWindow)))) === 0;
                if ($166) {
                    return [ RDF.quad(v.value0.membershipResource)(opts.poisonRelation)(RDF.literalType("true")(RDF["namedNode$prime"](RDF_Prefixes.xsd)("boolean")))(RDF.defaultGraph) ];
                };
                return [ RDF.quad(v.value0.membershipResource)(opts.poisonRelation)(RDF.literalType("false")(RDF["namedNode$prime"](RDF_Prefixes.xsd)("boolean")))(RDF.defaultGraph) ];
            };
        };
    };
};
var getUnionGraph = function (v) {
    return foldl(union1)(Data_Set.empty)(map1(Data_Tuple.snd)(v.value0));
};
var getGraphsInWindow = function (graphArray) {
    return function (now) {
        return function (contentTimestampRelation) {
            return function (start) {
                return function (end) {
                    return Data_Array.filter(function (graph) {
                        return isGraphInWindow(now)(contentTimestampRelation)(start)(end)(graph);
                    })(graphArray);
                };
            };
        };
    };
};
var membershipQuads = function (opts) {
    return function (now) {
        return function (graphArray) {
            return function (v) {
                return map1(function (v1) {
                    return RDF.quad(v.value0.membershipResource)(opts.memberRelation)(RDF.namedNode("/" + show1(v1.value0)))(RDF.defaultGraph);
                })(getGraphsInWindow(graphArray)(now)(opts.contentTimestampRelation)(v.value0.start)(v.value0.end));
            };
        };
    };
};
var streamContainerToQuads = function (opts) {
    return function (now) {
        return function (v) {
            var predQuads = (function () {
                if (opts.predicate instanceof Data_Maybe.Just) {
                    return [ RDF.quad(RDF.namedNode(""))(RDF["namedNode$prime"](ldpsc)("assignedPredicate"))(opts.predicate.value0)(RDF.defaultGraph) ];
                };
                if (opts.predicate instanceof Data_Maybe.Nothing) {
                    return [  ];
                };
                throw new Error("Failed pattern match at Main (line 158, column 19 - line 160, column 22): " + [ opts.predicate.constructor.name ]);
            })();
            return append1([ RDF.quad(RDF.namedNode(""))(RDF["namedNode$prime"](RDF_Prefixes.rdf)("type"))(RDF["namedNode$prime"](ldpsc)("StreamContainer"))(RDF.defaultGraph), RDF.quad(RDF.namedNode(""))(RDF["namedNode$prime"](RDF_Prefixes.ldp)("hasMemberRelation"))(opts.memberRelation)(RDF.defaultGraph), RDF.quad(RDF.namedNode(""))(RDF["namedNode$prime"](ldpsc)("hasContentTimestampRelation"))(opts.contentTimestampRelation)(RDF.defaultGraph), RDF.quad(RDF.namedNode(""))(RDF["namedNode$prime"](ldpsc)("hasPoisonRelation"))(opts.poisonRelation)(RDF.defaultGraph), RDF.quad(RDF.namedNode(""))(RDF["namedNode$prime"](ldpsc)("hasContentPoisonRelation"))(opts.contentPoisonRelation)(RDF.defaultGraph), RDF.quad(RDF.namedNode(""))(RDF["namedNode$prime"](ldpsc)("currentTime"))(RDF.literalType(Data_Formatter_DateTime.format(new Data_List_Types.Cons(Data_Formatter_DateTime.UnixTimestamp.value, Data_List_Types.Nil.value))(now))(RDF["namedNode$prime"](RDF_Prefixes.xsd)("integer")))(RDF.defaultGraph) ])(append1(predQuads)(append1(map1(function (v1) {
                return RDF.quad(RDF.namedNode(""))(RDF["namedNode$prime"](RDF_Prefixes.ldp)("contains"))(RDF.namedNode("/" + show1(v1.value0)))(RDF.defaultGraph);
            })(v.value0))(append1(Data_Array.concat(Data_Array.mapWithIndex(windowToQuads)(v.value1)))(append1(Data_Array.concat(map1(membershipQuads(opts)(now)(v.value0))(v.value1)))(Data_Array.concat(map1(poisonedQuads(opts)(now)(v.value0))(v.value1)))))));
        };
    };
};
var getGraphFromStreamContainer = function (i) {
    return function (v) {
        return Data_Array.find(function (v1) {
            return i === v1.value0;
        })(v.value0);
    };
};
var formatForMIME = function (v) {
    if (v === "text/turtle") {
        return N3.Turtle.value;
    };
    if (v === "application/trig") {
        return N3.TriG.value;
    };
    if (v === "application/n-triples") {
        return N3.NTriples.value;
    };
    if (v === "application/n-quads") {
        return N3.NQuads.value;
    };
    return N3.Turtle.value;
};
var emptyStreamContainer = /* #__PURE__ */ (function () {
    return new StreamContainer([  ], [  ]);
})();
var addWindowToStreamContainer = function (window) {
    return function (v) {
        return new StreamContainer(v.value0, Data_Array.snoc(v.value1)(window));
    };
};
var addGraphToStreamContainer = function (opts) {
    return function (datetime) {
        return function (newGraph) {
            return function (v) {
                var nextIdx = Data_Maybe.fromMaybe(0)(map(map2(add(1))(Data_Tuple.fst))(Data_Array.last(v.value0)));
                var largestWindow = Data_Maybe.fromMaybe(0.0)(Data_Set.findMax(map3(function (v1) {
                    return v1.value0.end;
                })(fromFoldable3(v.value1))));
                var graphTooOld = function (graph) {
                    return Data_Maybe.fromMaybe(true)(bind(Data_Set.findMax(filter(function (q) {
                        return eq(RDF.predicate(q))(opts.contentTimestampRelation);
                    })(Data_Tuple.snd(graph))))(function (quad) {
                        return bind(Data_Either.hush(Parsing.runParser(RDF.value(RDF.object(quad)))(unformatParser(new Data_List_Types.Cons(Data_Formatter_DateTime.UnixTimestamp.value, Data_List_Types.Nil.value)))))(function (timestamp) {
                            return bind(adjust(negateDuration(largestWindow))(datetime))(function (largestWindowBack) {
                                return bind(adjust(-Data_Maybe.fromMaybe(10.0)(Data_Number.fromString(show1(opts.grace))))(largestWindowBack))(function (plusTenSecondsBack) {
                                    return pure(lessThan1(timestamp)(plusTenSecondsBack));
                                });
                            });
                        });
                    }));
                };
                return new StreamContainer(Data_Array.snoc(Data_Array.dropWhile(graphTooOld)(v.value0))(new Data_Tuple.Tuple(nextIdx, newGraph)), v.value1);
            };
        };
    };
};
var provideData = function (opts) {
    return function (scRef) {
        return function (predicate) {
            return function (dataProviders) {
                var provideOneData = function (poison) {
                    return function (v) {
                        return function __do() {
                            var i = Effect_Ref.read(v.value0)();
                            var now = Effect_Now.nowDateTime();
                            var object = (function () {
                                var v1 = Data_Array.index(v.value1.value1)(i);
                                if (v1 instanceof Data_Maybe.Nothing) {
                                    Effect_Ref.write(1)(v.value0)();
                                    return Data_Maybe.fromMaybe(RDF.namedNode("error"))(Data_Array.head(v.value1.value1));
                                };
                                if (v1 instanceof Data_Maybe.Just) {
                                    Effect_Ref.write(i + 1 | 0)(v.value0)();
                                    return v1.value0;
                                };
                                throw new Error("Failed pattern match at Main (line 326, column 19 - line 332, column 24): " + [ v1.constructor.name ]);
                            })();
                            var graph = fromFoldable4(append1([ RDF.quad(v.value1.value0)(predicate)(object)(RDF.defaultGraph), RDF.quad(RDF.namedNode(""))(opts.contentTimestampRelation)(RDF.literalType(Data_Formatter_DateTime.format(new Data_List_Types.Cons(Data_Formatter_DateTime.UnixTimestamp.value, Data_List_Types.Nil.value))(now))(RDF["namedNode$prime"](RDF_Prefixes.xsd)("integer")))(RDF.defaultGraph) ])((function () {
                                if (poison) {
                                    return [ RDF.quad(RDF.namedNode(""))(opts.contentPoisonRelation)(RDF.literalType("true")(RDF["namedNode$prime"](RDF_Prefixes.xsd)("boolean")))(RDF.defaultGraph) ];
                                };
                                return [  ];
                            })()));
                            Effect_Aff.launchAff_(logDebug1("Inserted '" + show2(RDF.quad(v.value1.value0)(predicate)(object)(RDF.defaultGraph))))();
                            return Effect_Ref.modify_(addGraphToStreamContainer(opts)(now)(graph))(scRef)();
                        };
                    };
                };
                return function __do() {
                    map4(fold)(sequence(map1(provideOneData(false))(Data_Maybe.fromMaybe([  ])(Data_Array.init(dataProviders)))))();
                    return Data_Maybe.fromMaybe(pure1(Data_Unit.unit))(map(provideOneData(true))(Data_Array.last(dataProviders)))();
                };
            };
        };
    };
};
var setupProvideData = function (opts) {
    return function (scRef) {
        return function (predicate) {
            return function (dataProviders) {
                var iRefForDataProvider = function (dp) {
                    return function __do() {
                        var iRef = Effect_Ref["new"](0)();
                        return new Data_Tuple.Tuple(iRef, dp);
                    };
                };
                return function __do() {
                    var iRefsDataProviders = sequence(map1(iRefForDataProvider)(dataProviders))();
                    Effect_Timer.setInterval(1000)(provideData(opts)(scRef)(predicate)(iRefsDataProviders))();
                    return Data_Unit.unit;
                };
            };
        };
    };
};
var router = function (v) {
    return function (v1) {
        return function (v2) {
            if (v2.method instanceof HTTPure_Method.Get && v2.path.length === 0) {
                var createSCPayload = function (streamContainer) {
                    return function (time) {
                        var format = formatForMIME(Data_Maybe.fromMaybe("text/turtle")(lookup("Accept")(v2.headers)));
                        return bind2($$try(N3.write(URI_URI.print(CLI.uriOptions)(v.uri))(format)(streamContainerToQuads(v)(time)(streamContainer))))(function (payload) {
                            if (payload instanceof Data_Either.Left) {
                                return discard2(logError1("Serializing triples for Stream Container failed: " + Effect_Exception.message(payload.value0)))(function () {
                                    return logResponse1(v2)(internalServerError("Serializing Turtle for Stream Container failed: " + Effect_Exception.message(payload.value0)));
                                });
                            };
                            if (payload instanceof Data_Either.Right) {
                                return logResponse1(v2)(ok$prime(HTTPure_Headers.header("Content-Type")(mimeForFormat(format)))(payload.value0));
                            };
                            throw new Error("Failed pattern match at Main (line 217, column 7 - line 221, column 100): " + [ payload.constructor.name ]);
                        });
                    };
                };
                return bind2(liftEffect(Effect_Ref.read(v1)))(function (streamContainer) {
                    var v3 = lookup("Accept-Datetime")(v2.headers);
                    if (v3 instanceof Data_Maybe.Nothing) {
                        return bind2(liftEffect(Effect_Now.nowDateTime))(function (time) {
                            return createSCPayload(streamContainer)(Data_Maybe.fromMaybe(time)(apply(map(map2(Data_DateTime.modifyTime)(Data_Time.setMillisecond))(toEnum(0)))(new Data_Maybe.Just(time))));
                        });
                    };
                    if (v3 instanceof Data_Maybe.Just) {
                        var v4 = Parsing.runParser(v3.value0)(unformatParser(new Data_List_Types.Cons(Data_Formatter_DateTime.UnixTimestamp.value, Data_List_Types.Nil.value)));
                        if (v4 instanceof Data_Either.Left) {
                            return discard2(logWarn1("Not able to parse Accept-Datetime of request: " + Parsing.parseErrorMessage(v4.value0)))(function () {
                                return logResponse1(v2)(badRequest("Not able to parse Accept-Datetime of request: " + Parsing.parseErrorMessage(v4.value0)));
                            });
                        };
                        if (v4 instanceof Data_Either.Right) {
                            return createSCPayload(streamContainer)(Data_Maybe.fromMaybe(v4.value0)(apply(map(map2(Data_DateTime.modifyTime)(Data_Time.setMillisecond))(toEnum(0)))(new Data_Maybe.Just(v4.value0))));
                        };
                        throw new Error("Failed pattern match at Main (line 207, column 24 - line 211, column 132): " + [ v4.constructor.name ]);
                    };
                    throw new Error("Failed pattern match at Main (line 202, column 3 - line 211, column 132): " + [ v3.constructor.name ]);
                });
            };
            if (v2.method instanceof HTTPure_Method.Post && v2.path.length === 0) {
                return bind2(liftEffect(Effect_Ref.read(v1)))(function (streamContainer) {
                    return bind2(HTTPure_Body.toString(v2.body))(function (bodyString) {
                        var format = formatForMIME(Data_Maybe.fromMaybe("text/turtle")(lookup("Accept")(v2.headers)));
                        return bind2($$try(N3.parse(URI_URI.print(CLI.uriOptions)(Data_Lens_Setter.set(function ($268) {
                            return _hierPart(_path($268));
                        })([ URI_Path_Segment.segmentFromString(show1(nextGraphId(streamContainer))) ])(v.uri)))(format)(bodyString)))(function (payload) {
                            if (payload instanceof Data_Either.Left) {
                                return discard2(logError1("Parsing request body failed: " + Effect_Exception.message(payload.value0)))(function () {
                                    return logResponse1(v2)(badRequest("Parsing request body failed: " + Effect_Exception.message(payload.value0)));
                                });
                            };
                            if (payload instanceof Data_Either.Right) {
                                return bind2(liftEffect(Effect_Now.nowDateTime))(function (datetime) {
                                    return discard2(liftEffect(Effect_Ref.modify_(addGraphToStreamContainer(v)(datetime)(fromFoldable4(payload.value0)))(v1)))(function () {
                                        return logResponse1(v2)(created);
                                    });
                                });
                            };
                            throw new Error("Failed pattern match at Main (line 228, column 3 - line 235, column 34): " + [ payload.constructor.name ]);
                        });
                    });
                });
            };
            if (v2.method instanceof HTTPure_Method.Get && (v2.path.length === 1 && v2["path"][0] === "all")) {
                return bind2(liftEffect(Effect_Ref.read(v1)))(function (streamContainer) {
                    var graph = getUnionGraph(streamContainer);
                    var format = formatForMIME(Data_Maybe.fromMaybe("text/turtle")(lookup("Accept")(v2.headers)));
                    return bind2(N3.write(URI_URI.print(CLI.uriOptions)(v.uri))(format)(fromFoldable(graph)))(function (payload) {
                        return logResponse1(v2)(ok$prime(HTTPure_Headers.header("Content-Type")(mimeForFormat(format)))(payload));
                    });
                });
            };
            if (v2.method instanceof HTTPure_Method.Get && Data_Array.length(v2.path) === 1) {
                return bind2(liftEffect(Effect_Ref.read(v1)))(function (streamContainer) {
                    var v3 = Data_Int.fromString(at(v2.path)(0));
                    if (v3 instanceof Data_Maybe.Nothing) {
                        return logResponse1(v2)(notFound);
                    };
                    if (v3 instanceof Data_Maybe.Just) {
                        var v4 = getGraphFromStreamContainer(v3.value0)(streamContainer);
                        if (v4 instanceof Data_Maybe.Nothing) {
                            return logResponse1(v2)(notFound);
                        };
                        if (v4 instanceof Data_Maybe.Just) {
                            var format = formatForMIME(Data_Maybe.fromMaybe("text/turtle")(lookup("Accept")(v2.headers)));
                            return bind2($$try(N3.write(URI_URI.print(CLI.uriOptions)(Data_Lens_Setter.set(function ($269) {
                                return _hierPart(_path($269));
                            })([ URI_Path_Segment.segmentFromString(show1(v3.value0)) ])(v.uri)))(format)(fromFoldable(Data_Tuple.snd(v4.value0)))))(function (payload) {
                                if (payload instanceof Data_Either.Left) {
                                    return discard2(logError1("Serializing triples for contained resource failed: " + Effect_Exception.message(payload.value0)))(function () {
                                        return logResponse1(v2)(internalServerError("Serializing triples for contained resource failed: " + Effect_Exception.message(payload.value0)));
                                    });
                                };
                                if (payload instanceof Data_Either.Right) {
                                    return logResponse1(v2)(ok$prime(HTTPure_Headers.header("Content-Type")(mimeForFormat(format)))(payload.value0));
                                };
                                throw new Error("Failed pattern match at Main (line 251, column 7 - line 255, column 98): " + [ payload.constructor.name ]);
                            });
                        };
                        throw new Error("Failed pattern match at Main (line 246, column 13 - line 255, column 98): " + [ v4.constructor.name ]);
                    };
                    throw new Error("Failed pattern match at Main (line 244, column 177 - line 255, column 98): " + [ v3.constructor.name ]);
                });
            };
            if (v2.method instanceof HTTPure_Method.Post && (v2.path.length === 1 && v2["path"][0] === "window")) {
                return bind2(HTTPure_Body.toString(v2.body))(function (bodyString) {
                    var format = formatForMIME(Data_Maybe.fromMaybe("text/turtle")(lookup("Accept")(v2.headers)));
                    return bind2($$try(N3.parse(URI_URI.print(CLI.uriOptions)(v.uri))(format)(bodyString)))(function (payload) {
                        if (payload instanceof Data_Either.Left) {
                            return discard2(logError1("Parsing request body failed: " + Effect_Exception.message(payload.value0)))(function () {
                                return logResponse1(v2)(internalServerError("Parsing request body failed: " + Effect_Exception.message(payload.value0)));
                            });
                        };
                        if (payload instanceof Data_Either.Right) {
                            var v3 = map(addWindowToStreamContainer)(quadsToWindow(payload.value0));
                            if (v3 instanceof Data_Maybe.Nothing) {
                                return discard2(logError1("Triples in request body do not constitute a valid window"))(function () {
                                    return logResponse1(v2)(badRequest("Triples in request body do not constitute a valid window"));
                                });
                            };
                            if (v3 instanceof Data_Maybe.Just) {
                                return discard2(liftEffect(Effect_Ref.modify_(v3.value0)(v1)))(function () {
                                    return logResponse1(v2)(created);
                                });
                            };
                            throw new Error("Failed pattern match at Main (line 265, column 20 - line 271, column 36): " + [ v3.constructor.name ]);
                        };
                        throw new Error("Failed pattern match at Main (line 261, column 3 - line 271, column 36): " + [ payload.constructor.name ]);
                    });
                });
            };
            return logResponse1(v2)(notFound);
        };
    };
};
var _That = function (dictChoice) {
    return Data_Lens_Prism["prism$prime"](Data_These.That.create)(function (v) {
        if (v instanceof Data_These.This) {
            return Data_Maybe.Nothing.value;
        };
        if (v instanceof Data_These.That) {
            return new Data_Maybe.Just(v.value0);
        };
        if (v instanceof Data_These.Both) {
            return new Data_Maybe.Just(v.value1);
        };
        throw new Error("Failed pattern match at Main (line 301, column 21 - line 304, column 21): " + [ v.constructor.name ]);
    })(dictChoice);
};
var _That1 = /* #__PURE__ */ _That(choiceForget);
var main = /* #__PURE__ */ (function () {
    var port = function (opts) {
        return Data_Maybe.fromMaybe(8080)(map(URI_Port.toInt)(Data_Lens_Fold.preview(function ($270) {
            return _hierPart1(_authority(_hosts(_Just(_That1($270)))));
        })(opts.uri)));
    };
    return function __do() {
        var streamContainerRef = Effect_Ref["new"](emptyStreamContainer)();
        var opts = Options_Applicative_Extra.execParser(CLI.optsInfo)();
        setupProvideData(opts)(streamContainerRef)(Data_Maybe.fromMaybe(RDF.namedNode("error"))(opts.predicate))(fromFoldable5(opts.dataProviders))();
        Effect_Ref.modify_(function (sc) {
            return foldr(addWindowToStreamContainer)(sc)(opts.windows);
        })(streamContainerRef)();
        var time = Effect_Now.nowDateTime();
        return HTTPure_Server.serve(port(opts))(router(opts)(streamContainerRef))(Effect_Console.log("[INFO]\x09[" + (Data_Formatter_DateTime.format(new Data_List_Types.Cons(Data_Formatter_DateTime.UnixTimestamp.value, Data_List_Types.Nil.value))(time) + ("] Server up at " + URI_URI.print(CLI.uriOptions)(opts.uri)))))();
    };
})();
export {
    StreamContainer,
    _That,
    addGraphToStreamContainer,
    addWindowToStreamContainer,
    emptyStreamContainer,
    formatForMIME,
    getGraphFromStreamContainer,
    getGraphsInWindow,
    getUnionGraph,
    isGraphInWindow,
    ldpsc,
    logDebug,
    logError,
    logInfo,
    logResponse,
    logWarn,
    main,
    membershipQuads,
    mimeForFormat,
    nextGraphId,
    quadsToWindow,
    router,
    streamContainerToQuads,
    windowToQuads
};
