// Generated by purs version 0.15.10
import * as Data_Eq from "../Data.Eq/index.js";
import * as Data_Maybe from "../Data.Maybe/index.js";
import * as Data_Ord from "../Data.Ord/index.js";
import * as Data_Ordering from "../Data.Ordering/index.js";
import * as Data_Show from "../Data.Show/index.js";
var compare = /* #__PURE__ */ Data_Ord.compare(Data_Ord.ordString);
var NamedNode = /* #__PURE__ */ (function () {
    function NamedNode(value0) {
        this.value0 = value0;
    };
    NamedNode.create = function (value0) {
        return new NamedNode(value0);
    };
    return NamedNode;
})();
var BlankNode = /* #__PURE__ */ (function () {
    function BlankNode(value0) {
        this.value0 = value0;
    };
    BlankNode.create = function (value0) {
        return new BlankNode(value0);
    };
    return BlankNode;
})();
var LiteralLang = /* #__PURE__ */ (function () {
    function LiteralLang(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    LiteralLang.create = function (value0) {
        return function (value1) {
            return new LiteralLang(value0, value1);
        };
    };
    return LiteralLang;
})();
var LiteralType = /* #__PURE__ */ (function () {
    function LiteralType(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    LiteralType.create = function (value0) {
        return function (value1) {
            return new LiteralType(value0, value1);
        };
    };
    return LiteralType;
})();
var Variable = /* #__PURE__ */ (function () {
    function Variable(value0) {
        this.value0 = value0;
    };
    Variable.create = function (value0) {
        return new Variable(value0);
    };
    return Variable;
})();
var DefaultGraph = /* #__PURE__ */ (function () {
    function DefaultGraph() {

    };
    DefaultGraph.value = new DefaultGraph();
    return DefaultGraph;
})();
var Quad = /* #__PURE__ */ (function () {
    function Quad(value0, value1, value2, value3) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
        this.value3 = value3;
    };
    Quad.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return function (value3) {
                    return new Quad(value0, value1, value2, value3);
                };
            };
        };
    };
    return Quad;
})();
var variable = function (s) {
    return new Variable(s);
};
var value = function (v) {
    if (v instanceof NamedNode) {
        return v.value0;
    };
    if (v instanceof BlankNode) {
        return v.value0;
    };
    if (v instanceof LiteralLang) {
        return v.value0;
    };
    if (v instanceof LiteralType) {
        return v.value0;
    };
    if (v instanceof Variable) {
        return v.value0;
    };
    if (v instanceof DefaultGraph) {
        return "";
    };
    throw new Error("Failed pattern match at RDF (line 85, column 1 - line 85, column 24): " + [ v.constructor.name ]);
};
var termType = function (v) {
    if (v instanceof NamedNode) {
        return "NamedNode";
    };
    if (v instanceof BlankNode) {
        return "BlankNode";
    };
    if (v instanceof LiteralLang) {
        return "Literal";
    };
    if (v instanceof LiteralType) {
        return "Literal";
    };
    if (v instanceof Variable) {
        return "Variable";
    };
    if (v instanceof DefaultGraph) {
        return "DefaultGraph";
    };
    throw new Error("Failed pattern match at RDF (line 77, column 1 - line 77, column 27): " + [ v.constructor.name ]);
};
var subject = function (v) {
    return v.value0;
};
var showTerm = {
    show: function (v) {
        if (v instanceof NamedNode) {
            return "<" + (v.value0 + ">");
        };
        if (v instanceof BlankNode) {
            return "_:" + v.value0;
        };
        if (v instanceof LiteralLang) {
            return "\"" + (v.value0 + ("\"@" + v.value1));
        };
        if (v instanceof LiteralType) {
            return "\"" + (v.value0 + ("\"^^" + Data_Show.show(showTerm)(v.value1)));
        };
        if (v instanceof Variable) {
            return "?" + v.value0;
        };
        if (v instanceof DefaultGraph) {
            return "";
        };
        throw new Error("Failed pattern match at RDF (line 33, column 1 - line 39, column 25): " + [ v.constructor.name ]);
    }
};
var show = /* #__PURE__ */ Data_Show.show(showTerm);
var showQuad = {
    show: function (v) {
        if (v.value3 instanceof DefaultGraph) {
            return show(v.value0) + (" " + (show(v.value1) + (" " + (show(v.value2) + " ."))));
        };
        return show(v.value0) + (" " + (show(v.value1) + (" " + (show(v.value2) + (" " + (show(v.value3) + " ."))))));
    }
};
var quad = function (s) {
    return function (p) {
        return function (o) {
            return function (g) {
                return new Quad(s, p, o, g);
            };
        };
    };
};
var predicate = function (v) {
    return v.value1;
};
var object = function (v) {
    return v.value2;
};
var namedNode$prime = function (v) {
    return function (s) {
        return new NamedNode(v + s);
    };
};
var namedNode = function (s) {
    return new NamedNode(s);
};
var literalType = function (s) {
    return function (t) {
        return new LiteralType(s, t);
    };
};
var literalLang = function (s) {
    return function (l) {
        return new LiteralLang(s, l);
    };
};
var language = function (v) {
    if (v instanceof LiteralLang) {
        return new Data_Maybe.Just(v.value1);
    };
    return Data_Maybe.Nothing.value;
};
var graph = function (v) {
    return v.value3;
};
var eqTerm = {
    eq: function (x) {
        return function (y) {
            if (x instanceof NamedNode && y instanceof NamedNode) {
                return x.value0 === y.value0;
            };
            if (x instanceof BlankNode && y instanceof BlankNode) {
                return x.value0 === y.value0;
            };
            if (x instanceof LiteralLang && y instanceof LiteralLang) {
                return x.value0 === y.value0 && x.value1 === y.value1;
            };
            if (x instanceof LiteralType && y instanceof LiteralType) {
                return x.value0 === y.value0 && Data_Eq.eq(eqTerm)(x.value1)(y.value1);
            };
            if (x instanceof Variable && y instanceof Variable) {
                return x.value0 === y.value0;
            };
            if (x instanceof DefaultGraph && y instanceof DefaultGraph) {
                return true;
            };
            return false;
        };
    }
};
var eq1 = /* #__PURE__ */ Data_Eq.eq(eqTerm);
var ordTerm = {
    compare: function (x) {
        return function (y) {
            if (x instanceof NamedNode && y instanceof NamedNode) {
                return compare(x.value0)(y.value0);
            };
            if (x instanceof NamedNode) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof NamedNode) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof BlankNode && y instanceof BlankNode) {
                return compare(x.value0)(y.value0);
            };
            if (x instanceof BlankNode) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof BlankNode) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof LiteralLang && y instanceof LiteralLang) {
                var v = compare(x.value0)(y.value0);
                if (v instanceof Data_Ordering.LT) {
                    return Data_Ordering.LT.value;
                };
                if (v instanceof Data_Ordering.GT) {
                    return Data_Ordering.GT.value;
                };
                return compare(x.value1)(y.value1);
            };
            if (x instanceof LiteralLang) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof LiteralLang) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof LiteralType && y instanceof LiteralType) {
                var v = compare(x.value0)(y.value0);
                if (v instanceof Data_Ordering.LT) {
                    return Data_Ordering.LT.value;
                };
                if (v instanceof Data_Ordering.GT) {
                    return Data_Ordering.GT.value;
                };
                return Data_Ord.compare(ordTerm)(x.value1)(y.value1);
            };
            if (x instanceof LiteralType) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof LiteralType) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof Variable && y instanceof Variable) {
                return compare(x.value0)(y.value0);
            };
            if (x instanceof Variable) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof Variable) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof DefaultGraph && y instanceof DefaultGraph) {
                return Data_Ordering.EQ.value;
            };
            throw new Error("Failed pattern match at RDF (line 0, column 0 - line 0, column 0): " + [ x.constructor.name, y.constructor.name ]);
        };
    },
    Eq0: function () {
        return eqTerm;
    }
};
var compare1 = /* #__PURE__ */ Data_Ord.compare(ordTerm);
var eqQuad = {
    eq: function (x) {
        return function (y) {
            return eq1(x.value0)(y.value0) && eq1(x.value1)(y.value1) && eq1(x.value2)(y.value2) && eq1(x.value3)(y.value3);
        };
    }
};
var ordQuad = {
    compare: function (x) {
        return function (y) {
            var v = compare1(x.value0)(y.value0);
            if (v instanceof Data_Ordering.LT) {
                return Data_Ordering.LT.value;
            };
            if (v instanceof Data_Ordering.GT) {
                return Data_Ordering.GT.value;
            };
            var v1 = compare1(x.value1)(y.value1);
            if (v1 instanceof Data_Ordering.LT) {
                return Data_Ordering.LT.value;
            };
            if (v1 instanceof Data_Ordering.GT) {
                return Data_Ordering.GT.value;
            };
            var v2 = compare1(x.value2)(y.value2);
            if (v2 instanceof Data_Ordering.LT) {
                return Data_Ordering.LT.value;
            };
            if (v2 instanceof Data_Ordering.GT) {
                return Data_Ordering.GT.value;
            };
            return compare1(x.value3)(y.value3);
        };
    },
    Eq0: function () {
        return eqQuad;
    }
};
var defaultGraph = /* #__PURE__ */ (function () {
    return DefaultGraph.value;
})();
var triple = function (s) {
    return function (p) {
        return function (o) {
            return new Quad(s, p, o, defaultGraph);
        };
    };
};
var datatype = function (v) {
    if (v instanceof LiteralType) {
        return new Data_Maybe.Just(v.value1);
    };
    return Data_Maybe.Nothing.value;
};
var blankNode = function (s) {
    return new BlankNode(s);
};
export {
    namedNode,
    namedNode$prime,
    blankNode,
    literalType,
    literalLang,
    variable,
    defaultGraph,
    quad,
    triple,
    termType,
    value,
    language,
    datatype,
    subject,
    predicate,
    object,
    graph,
    eqTerm,
    ordTerm,
    showTerm,
    eqQuad,
    ordQuad,
    showQuad
};
