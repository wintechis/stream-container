// Generated by purs version 0.15.10
import * as Control_Applicative from "../Control.Applicative/index.js";
import * as Control_Apply from "../Control.Apply/index.js";
import * as Control_Bind from "../Control.Bind/index.js";
import * as Data_Boolean from "../Data.Boolean/index.js";
import * as Data_Eq from "../Data.Eq/index.js";
import * as Data_Functor from "../Data.Functor/index.js";
import * as Data_Int from "../Data.Int/index.js";
import * as Data_List from "../Data.List/index.js";
import * as Data_List_Types from "../Data.List.Types/index.js";
import * as Data_Maybe from "../Data.Maybe/index.js";
import * as Data_Ord from "../Data.Ord/index.js";
import * as Data_Show from "../Data.Show/index.js";
import * as Data_String_NonEmpty_CodeUnits from "../Data.String.NonEmpty.CodeUnits/index.js";
import * as Data_String_NonEmpty_Internal from "../Data.String.NonEmpty.Internal/index.js";
import * as Parsing from "../Parsing/index.js";
import * as Parsing_String from "../Parsing.String/index.js";
import * as Parsing_String_Basic from "../Parsing.String.Basic/index.js";
import * as Partial_Unsafe from "../Partial.Unsafe/index.js";
var show = /* #__PURE__ */ Data_Show.show(Data_Show.showInt);
var map = /* #__PURE__ */ Data_Functor.map(Parsing.functorParserT);
var pure = /* #__PURE__ */ Control_Applicative.pure(Parsing.applicativeParserT);
var Port = function (x) {
    return x;
};
var toInt = function (v) {
    return v;
};
var showPort = {
    show: function (v) {
        return "(Port.unsafeFromInt " + (show(v) + ")");
    }
};
var print = function (v) {
    return ":" + show(v);
};
var parser = /* #__PURE__ */ Control_Bind.bind(Parsing.bindParserT)(/* #__PURE__ */ map(/* #__PURE__ */ Data_String_NonEmpty_Internal.joinWith(Data_List_Types.foldableList)(""))(/* #__PURE__ */ Control_Apply.applySecond(Parsing.applyParserT)(/* #__PURE__ */ Parsing_String["char"](":"))(/* #__PURE__ */ Data_List.someRec(Parsing.monadRecParserT)(Parsing.alternativeParserT)(/* #__PURE__ */ map(Data_String_NonEmpty_CodeUnits.singleton)(Parsing_String_Basic.digit)))))(function (s) {
    var v = Data_Int.fromStringAs(Data_Int.decimal)(s);
    if (v instanceof Data_Maybe.Just) {
        return pure(v.value0);
    };
    return Parsing.fail("Expected a valid port number");
});
var ordPort = Data_Ord.ordInt;
var fromInt = function (i) {
    if (i >= 0 && i <= 65535) {
        return new Data_Maybe.Just(i);
    };
    if (Data_Boolean.otherwise) {
        return Data_Maybe.Nothing.value;
    };
    throw new Error("Failed pattern match at URI.Port (line 37, column 1 - line 37, column 29): " + [ i.constructor.name ]);
};
var unsafeFromInt = function (i) {
    var v = fromInt(i);
    if (v instanceof Data_Maybe.Just) {
        return v.value0;
    };
    if (v instanceof Data_Maybe.Nothing) {
        return Partial_Unsafe.unsafeCrashWith("Port value " + (show(i) + " is out of range"));
    };
    throw new Error("Failed pattern match at URI.Port (line 49, column 3 - line 51, column 79): " + [ v.constructor.name ]);
};
var eqPort = Data_Eq.eqInt;
export {
    toInt,
    fromInt,
    unsafeFromInt,
    parser,
    print,
    eqPort,
    ordPort,
    showPort
};
