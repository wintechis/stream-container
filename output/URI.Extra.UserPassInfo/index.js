// Generated by purs version 0.15.10
import * as Control_Alt from "../Control.Alt/index.js";
import * as Data_Either from "../Data.Either/index.js";
import * as Data_Eq from "../Data.Eq/index.js";
import * as Data_Function from "../Data.Function/index.js";
import * as Data_Functor from "../Data.Functor/index.js";
import * as Data_Maybe from "../Data.Maybe/index.js";
import * as Data_Ord from "../Data.Ord/index.js";
import * as Data_Ordering from "../Data.Ordering/index.js";
import * as Data_Semigroup from "../Data.Semigroup/index.js";
import * as Data_Show from "../Data.Show/index.js";
import * as Data_String_NonEmpty_CodeUnits from "../Data.String.NonEmpty.CodeUnits/index.js";
import * as Data_String_NonEmpty_Internal from "../Data.String.NonEmpty.Internal/index.js";
import * as Parsing from "../Parsing/index.js";
import * as URI_Common from "../URI.Common/index.js";
import * as URI_UserInfo from "../URI.UserInfo/index.js";
var show = /* #__PURE__ */ Data_Show.show(Data_String_NonEmpty_Internal.showNonEmptyString);
var show1 = /* #__PURE__ */ Data_Show.show(/* #__PURE__ */ Data_Maybe.showMaybe(Data_String_NonEmpty_Internal.showNonEmptyString));
var append1 = /* #__PURE__ */ Data_Semigroup.append(Data_String_NonEmpty_Internal.semigroupNonEmptyString);
var map = /* #__PURE__ */ Data_Functor.map(Data_Maybe.functorMaybe);
var eq = /* #__PURE__ */ Data_Eq.eq(/* #__PURE__ */ Data_Maybe.eqMaybe(Data_String_NonEmpty_Internal.eqNonEmptyString));
var eq1 = /* #__PURE__ */ Data_Eq.eq(Data_String_NonEmpty_Internal.eqNonEmptyString);
var compare = /* #__PURE__ */ Data_Ord.compare(/* #__PURE__ */ Data_Maybe.ordMaybe(Data_String_NonEmpty_Internal.ordNonEmptyString));
var compare1 = /* #__PURE__ */ Data_Ord.compare(Data_String_NonEmpty_Internal.ordNonEmptyString);
var UserPassInfo = function (x) {
    return x;
};
var userPassInfoChar = /* #__PURE__ */ Control_Alt.alt(Parsing.altParserT)(URI_Common.unreserved)(URI_Common.subDelims);
var showUserPassInfo = {
    show: function (v) {
        return "(UserPassInfo { user: " + (show(v.user) + (", password: " + (show1(v.password) + "})")));
    }
};
var print = function (v) {
    if (v.password instanceof Data_Maybe.Nothing) {
        return URI_UserInfo.unsafeFromString(URI_Common["printEncoded$prime"](userPassInfoChar)(v.user));
    };
    if (v.password instanceof Data_Maybe.Just) {
        return URI_UserInfo.unsafeFromString(append1(URI_Common["printEncoded$prime"](userPassInfoChar)(v.user))(append1(Data_String_NonEmpty_CodeUnits.singleton(":"))(URI_Common["printEncoded$prime"](userPassInfoChar)(v.password.value0))));
    };
    throw new Error("Failed pattern match at URI.Extra.UserPassInfo (line 67, column 3 - line 74, column 46): " + [ v.password.constructor.name ]);
};
var parse = function (ui) {
    var s = URI_UserInfo.unsafeToString(ui);
    var v = map(Data_Function.flip(Data_String_NonEmpty_CodeUnits.splitAt)(s))(Data_String_NonEmpty_CodeUnits.indexOf(":")(s));
    if (v instanceof Data_Maybe.Just && v.value0.before instanceof Data_Maybe.Nothing) {
        return new Data_Either.Left("Expected a username before a password segment");
    };
    if (v instanceof Data_Maybe.Just && (v.value0.before instanceof Data_Maybe.Just && v.value0.after instanceof Data_Maybe.Just)) {
        return new Data_Either.Right({
            user: URI_Common["decodeURIComponent$prime"](v.value0.before.value0),
            password: map(URI_Common["decodeURIComponent$prime"])(Data_String_NonEmpty_CodeUnits.drop(1)(v.value0.after.value0))
        });
    };
    return new Data_Either.Right({
        user: URI_Common["decodeURIComponent$prime"](s),
        password: Data_Maybe.Nothing.value
    });
};
var newtypeUserPassInfo = {
    Coercible0: function () {
        return undefined;
    }
};
var eqUserPassInfo = {
    eq: function (x) {
        return function (y) {
            return eq(x.password)(y.password) && eq1(x.user)(y.user);
        };
    }
};
var ordUserPassInfo = {
    compare: function (x) {
        return function (y) {
            var v = compare(x.password)(y.password);
            if (v instanceof Data_Ordering.LT) {
                return Data_Ordering.LT.value;
            };
            if (v instanceof Data_Ordering.GT) {
                return Data_Ordering.GT.value;
            };
            return compare1(x.user)(y.user);
        };
    },
    Eq0: function () {
        return eqUserPassInfo;
    }
};
export {
    UserPassInfo,
    parse,
    print,
    userPassInfoChar,
    eqUserPassInfo,
    ordUserPassInfo,
    newtypeUserPassInfo,
    showUserPassInfo
};
