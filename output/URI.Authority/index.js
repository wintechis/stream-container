// Generated by purs version 0.15.10
import * as Control_Applicative from "../Control.Applicative/index.js";
import * as Control_Apply from "../Control.Apply/index.js";
import * as Control_Bind from "../Control.Bind/index.js";
import * as Data_Eq from "../Data.Eq/index.js";
import * as Data_Generic_Rep from "../Data.Generic.Rep/index.js";
import * as Data_Identity from "../Data.Identity/index.js";
import * as Data_Lens_Lens from "../Data.Lens.Lens/index.js";
import * as Data_Maybe from "../Data.Maybe/index.js";
import * as Data_Ord from "../Data.Ord/index.js";
import * as Data_Ordering from "../Data.Ordering/index.js";
import * as Data_Show_Generic from "../Data.Show.Generic/index.js";
import * as Parsing from "../Parsing/index.js";
import * as Parsing_Combinators from "../Parsing.Combinators/index.js";
import * as Parsing_String from "../Parsing.String/index.js";
import * as URI_Common from "../URI.Common/index.js";
import * as URI_Host from "../URI.Host/index.js";
import * as URI_Port from "../URI.Port/index.js";
import * as URI_UserInfo from "../URI.UserInfo/index.js";
var bind = /* #__PURE__ */ Control_Bind.bind(Parsing.bindParserT);
var applyFirst = /* #__PURE__ */ Control_Apply.applyFirst(Parsing.applyParserT);
var wrapParser = /* #__PURE__ */ URI_Common.wrapParser(Data_Identity.monadIdentity);
var pure = /* #__PURE__ */ Control_Applicative.pure(Parsing.applicativeParserT);
var AuthorityIsSymbol = {
    reflectSymbol: function () {
        return "Authority";
    }
};
var Authority = /* #__PURE__ */ (function () {
    function Authority(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Authority.create = function (value0) {
        return function (value1) {
            return new Authority(value0, value1);
        };
    };
    return Authority;
})();
var print = function (opts) {
    return function (v) {
        if (v.value0 instanceof Data_Maybe.Just) {
            return "//" + (URI_UserInfo.print(opts.printUserInfo(v.value0.value0)) + ("@" + opts.printHosts(v.value1)));
        };
        if (v.value0 instanceof Data_Maybe.Nothing) {
            return "//" + opts.printHosts(v.value1);
        };
        throw new Error("Failed pattern match at URI.Authority (line 90, column 33 - line 92, column 40): " + [ v.value0.constructor.name ]);
    };
};
var parser = function (opts) {
    return bind(Parsing_String.string("//"))(function () {
        return bind(Parsing_Combinators.optionMaybe(Parsing_Combinators["try"](applyFirst(wrapParser(opts.parseUserInfo)(URI_UserInfo.parser))(Parsing_String["char"]("@")))))(function (ui) {
            return bind(opts.parseHosts)(function (hosts) {
                return pure(new Authority(ui, hosts));
            });
        });
    });
};
var genericAuthority = {
    to: function (x) {
        return new Authority(x.value0, x.value1);
    },
    from: function (x) {
        return new Data_Generic_Rep.Product(x.value0, x.value1);
    }
};
var genericShow = /* #__PURE__ */ Data_Show_Generic.genericShow(genericAuthority);
var showAuthority = function (dictShow) {
    var genericShowArgsProduct = Data_Show_Generic.genericShowArgsProduct(Data_Show_Generic.genericShowArgsArgument(Data_Maybe.showMaybe(dictShow)));
    return function (dictShow1) {
        return {
            show: genericShow(Data_Show_Generic.genericShowConstructor(genericShowArgsProduct(Data_Show_Generic.genericShowArgsArgument(dictShow1)))(AuthorityIsSymbol))
        };
    };
};
var eqAuthority = function (dictEq) {
    var eq = Data_Eq.eq(Data_Maybe.eqMaybe(dictEq));
    return function (dictEq1) {
        var eq1 = Data_Eq.eq(dictEq1);
        return {
            eq: function (x) {
                return function (y) {
                    return eq(x.value0)(y.value0) && eq1(x.value1)(y.value1);
                };
            }
        };
    };
};
var ordAuthority = function (dictOrd) {
    var compare = Data_Ord.compare(Data_Maybe.ordMaybe(dictOrd));
    var eqAuthority1 = eqAuthority(dictOrd.Eq0());
    return function (dictOrd1) {
        var compare1 = Data_Ord.compare(dictOrd1);
        var eqAuthority2 = eqAuthority1(dictOrd1.Eq0());
        return {
            compare: function (x) {
                return function (y) {
                    var v = compare(x.value0)(y.value0);
                    if (v instanceof Data_Ordering.LT) {
                        return Data_Ordering.LT.value;
                    };
                    if (v instanceof Data_Ordering.GT) {
                        return Data_Ordering.GT.value;
                    };
                    return compare1(x.value1)(y.value1);
                };
            },
            Eq0: function () {
                return eqAuthority2;
            }
        };
    };
};
var _userInfo = function (dictStrong) {
    return Data_Lens_Lens.lens(function (v) {
        return v.value0;
    })(function (v) {
        return function (ui) {
            return new Authority(ui, v.value1);
        };
    })(dictStrong);
};
var _hosts = function (dictStrong) {
    return Data_Lens_Lens.lens(function (v) {
        return v.value1;
    })(function (v) {
        return function (hs) {
            return new Authority(v.value0, hs);
        };
    })(dictStrong);
};
export {
    Authority,
    parser,
    print,
    _userInfo,
    _hosts,
    eqAuthority,
    ordAuthority,
    genericAuthority,
    showAuthority
};
export {
    IPv4Address,
    IPv6Address,
    NameAddress,
    _IPv4Address,
    _IPv6Address,
    _NameAddress
} from "../URI.Host/index.js";
