// Generated by purs version 0.15.10
import * as Control_Applicative from "../Control.Applicative/index.js";
import * as Control_Bind from "../Control.Bind/index.js";
import * as Control_Monad_Error_Class from "../Control.Monad.Error.Class/index.js";
import * as Data_Functor from "../Data.Functor/index.js";
import * as Data_Maybe from "../Data.Maybe/index.js";
import * as Data_Options from "../Data.Options/index.js";
import * as Data_Semigroup from "../Data.Semigroup/index.js";
import * as Data_Unit from "../Data.Unit/index.js";
import * as Effect from "../Effect/index.js";
import * as Effect_Aff from "../Effect.Aff/index.js";
import * as Effect_Aff_Class from "../Effect.Aff.Class/index.js";
import * as Effect_Class from "../Effect.Class/index.js";
import * as Effect_Console from "../Effect.Console/index.js";
import * as Effect_Exception from "../Effect.Exception/index.js";
import * as HTTPure_Body from "../HTTPure.Body/index.js";
import * as HTTPure_Request from "../HTTPure.Request/index.js";
import * as HTTPure_Response from "../HTTPure.Response/index.js";
import * as Node_Encoding from "../Node.Encoding/index.js";
import * as Node_FS_Sync from "../Node.FS.Sync/index.js";
import * as Node_HTTP from "../Node.HTTP/index.js";
import * as Node_HTTP_Secure from "../Node.HTTP.Secure/index.js";
var catchError = /* #__PURE__ */ Control_Monad_Error_Class.catchError(Effect_Aff.monadErrorAff);
var discard = /* #__PURE__ */ Control_Bind.discard(Control_Bind.discardUnit);
var discard1 = /* #__PURE__ */ discard(Effect_Aff.bindAff);
var liftEffect = /* #__PURE__ */ Effect_Class.liftEffect(Effect_Aff.monadEffectAff);
var internalServerError = /* #__PURE__ */ HTTPure_Response.internalServerError(Effect_Aff_Class.monadAffAff)(HTTPure_Body.bodyString);
var $$void = /* #__PURE__ */ Data_Functor["void"](Effect.functorEffect);
var pure = /* #__PURE__ */ Control_Applicative.pure(Effect.applicativeEffect);
var bind = /* #__PURE__ */ Control_Bind.bind(Effect_Aff.bindAff);
var send = /* #__PURE__ */ HTTPure_Response.send(Effect_Aff.monadEffectAff)(Effect_Aff_Class.monadAffAff);
var append = /* #__PURE__ */ Data_Semigroup.append(Data_Options.semigroupOptions);
var onError500 = function (router) {
    return function (request) {
        return catchError(router(request))(function (err) {
            return discard1(liftEffect(Effect_Console.error(Effect_Exception.message(err))))(function () {
                return internalServerError("Internal server error");
            });
        });
    };
};
var listenOptions = function (port) {
    return {
        hostname: "0.0.0.0",
        port: port,
        backlog: Data_Maybe.Nothing.value
    };
};
var handleRequest = function (router) {
    return function (request) {
        return function (httpresponse) {
            return $$void(Effect_Aff.runAff(function (v) {
                return pure(Data_Unit.unit);
            })(bind(bind(HTTPure_Request.fromHTTPRequest(request))(onError500(router)))(send(httpresponse))));
        };
    };
};
var serve$prime = function (options) {
    return function (router) {
        return function (onStarted) {
            return function __do() {
                var server = Node_HTTP.createServer(handleRequest(router))();
                Node_HTTP.listen(server)(options)(onStarted)();
                return Node_HTTP.close(server);
            };
        };
    };
};
var serve = function ($16) {
    return serve$prime(listenOptions($16));
};
var serveSecure$prime = function (sslOptions) {
    return function (options) {
        return function (router) {
            return function (onStarted) {
                return function __do() {
                    var server = Node_HTTP_Secure.createServer(sslOptions)(handleRequest(router))();
                    Node_HTTP.listen(server)(options)(onStarted)();
                    return Node_HTTP.close(server);
                };
            };
        };
    };
};
var serveSecure = function (port) {
    return function (certFile) {
        return function (keyFile) {
            return function (router) {
                return function (onStarted) {
                    return function __do() {
                        var cert$prime = Node_FS_Sync.readTextFile(Node_Encoding.UTF8.value)(certFile)();
                        var key$prime = Node_FS_Sync.readTextFile(Node_Encoding.UTF8.value)(keyFile)();
                        var sslOpts = append(Data_Options.assoc(Node_HTTP_Secure.key)(Node_HTTP_Secure.keyString(key$prime)))(Data_Options.assoc(Node_HTTP_Secure.cert)(Node_HTTP_Secure.certString(cert$prime)));
                        return serveSecure$prime(sslOpts)(listenOptions(port))(router)(onStarted)();
                    };
                };
            };
        };
    };
};
export {
    serve,
    serve$prime,
    serveSecure,
    serveSecure$prime
};
