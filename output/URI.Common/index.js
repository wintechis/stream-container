// Generated by purs version 0.15.10
import * as Control_Alt from "../Control.Alt/index.js";
import * as Control_Applicative from "../Control.Applicative/index.js";
import * as Control_Apply from "../Control.Apply/index.js";
import * as Control_Bind from "../Control.Bind/index.js";
import * as Control_Category from "../Control.Category/index.js";
import * as Control_Monad_Error_Class from "../Control.Monad.Error.Class/index.js";
import * as Data_Either from "../Data.Either/index.js";
import * as Data_Eq from "../Data.Eq/index.js";
import * as Data_Function from "../Data.Function/index.js";
import * as Data_Functor from "../Data.Functor/index.js";
import * as Data_List from "../Data.List/index.js";
import * as Data_List_Types from "../Data.List.Types/index.js";
import * as Data_Maybe from "../Data.Maybe/index.js";
import * as Data_Ord from "../Data.Ord/index.js";
import * as Data_Semigroup from "../Data.Semigroup/index.js";
import * as Data_Show from "../Data.Show/index.js";
import * as Data_Show_Generic from "../Data.Show.Generic/index.js";
import * as Data_String_CodeUnits from "../Data.String.CodeUnits/index.js";
import * as Data_String_NonEmpty_CodeUnits from "../Data.String.NonEmpty.CodeUnits/index.js";
import * as Data_String_NonEmpty_Internal from "../Data.String.NonEmpty.Internal/index.js";
import * as JSURI from "../JSURI/index.js";
import * as Parsing from "../Parsing/index.js";
import * as Parsing_String from "../Parsing.String/index.js";
import * as Parsing_String_Basic from "../Parsing.String.Basic/index.js";
var bind = /* #__PURE__ */ Control_Bind.bind(Parsing.bindParserT);
var throwError = /* #__PURE__ */ Control_Monad_Error_Class.throwError(Parsing.monadThrowParseErrorParse);
var pure = /* #__PURE__ */ Control_Applicative.pure(Parsing.applicativeParserT);
var map = /* #__PURE__ */ Data_Functor.map(Parsing.functorParserT);
var unsafeFromString = /* #__PURE__ */ Data_String_NonEmpty_Internal.unsafeFromString();
var bindFlipped = /* #__PURE__ */ Control_Bind.bindFlipped(Parsing.bindParserT);
var applyFirst = /* #__PURE__ */ Control_Apply.applyFirst(Parsing.applyParserT);
var joinWith = /* #__PURE__ */ Data_String_NonEmpty_Internal.joinWith(Data_List_Types.foldableList);
var manyRec = /* #__PURE__ */ Data_List.manyRec(Parsing.monadRecParserT)(Parsing.alternativeParserT);
var alt = /* #__PURE__ */ Control_Alt.alt(Parsing.altParserT);
var identity = /* #__PURE__ */ Control_Category.identity(Control_Category.categoryFn);
var append = /* #__PURE__ */ Data_Semigroup.append(Data_String_NonEmpty_Internal.semigroupNonEmptyString);
var fromJust = /* #__PURE__ */ Data_Maybe.fromJust();
var URIPartParseError = function (x) {
    return x;
};
var wrapParser = function (dictMonad) {
    return function (parseA) {
        return function (p) {
            return bind(Parsing.getParserT)(function (v) {
                return bind(p)(function (a) {
                    var v1 = parseA(a);
                    if (v1 instanceof Data_Either.Left) {
                        return throwError(new Parsing.ParseError(v1.value0, v.value1));
                    };
                    if (v1 instanceof Data_Either.Right) {
                        return pure(v1.value0);
                    };
                    throw new Error("Failed pattern match at URI.Common (line 58, column 3 - line 60, column 22): " + [ v1.constructor.name ]);
                });
            });
        };
    };
};
var subDelims = /* #__PURE__ */ Parsing_String_Basic.oneOf([ "!", "$", "&", "'", "(", ")", "*", "+", ";", "=", "," ]);
var printEncoded = function (p) {
    return function (s) {
        var simpleChar = map(Data_String_NonEmpty_CodeUnits.singleton)(p);
        var handleURIEncodingResult = function (v) {
            if (v instanceof Data_Maybe.Nothing) {
                return throwError(new Parsing.ParseError("Could not URI encode", Parsing.initialPos));
            };
            if (v instanceof Data_Maybe.Just) {
                return pure(unsafeFromString(v.value0));
            };
            throw new Error("Failed pattern match at URI.Common (line 105, column 3 - line 105, column 74): " + [ v.constructor.name ]);
        };
        var encodedChar = bindFlipped(handleURIEncodingResult)(map(function ($42) {
            return JSURI["encodeURIComponent"](Data_String_CodeUnits.singleton($42));
        })(Parsing_String.anyChar));
        var parse = applyFirst(map(joinWith(""))(manyRec(alt(simpleChar)(encodedChar))))(Parsing_String.eof);
        return Data_Either.either(Data_Function["const"](s))(identity)(Parsing.runParser(s)(parse));
    };
};
var printEncoded$prime = function (p) {
    var $44 = printEncoded(p);
    return function ($45) {
        return unsafeFromString($44(Data_String_NonEmpty_Internal.toString($45)));
    };
};
var pctEncoded = /* #__PURE__ */ bind(/* #__PURE__ */ Parsing_String["char"]("%"))(function (d0) {
    return bind(Parsing_String_Basic.hexDigit)(function (d1) {
        return bind(Parsing_String_Basic.hexDigit)(function (d2) {
            return pure(append(Data_String_NonEmpty_CodeUnits.singleton(d0))(append(Data_String_NonEmpty_CodeUnits.singleton(d1))(Data_String_NonEmpty_CodeUnits.singleton(d2))));
        });
    });
});
var ordURIPartParseError = Data_Ord.ordString;
var newtypeURIPartParseError = {
    Coercible0: function () {
        return undefined;
    }
};
var genericURIPartParseError = {
    to: function (x) {
        return x;
    },
    from: function (x) {
        return x;
    }
};
var showURIPartParseError = {
    show: /* #__PURE__ */ Data_Show_Generic.genericShow(genericURIPartParseError)(/* #__PURE__ */ Data_Show_Generic.genericShowConstructor(/* #__PURE__ */ Data_Show_Generic.genericShowArgsArgument(Data_Show.showString))({
        reflectSymbol: function () {
            return "URIPartParseError";
        }
    }))
};
var eqURIPartParseError = Data_Eq.eqString;
var decodeURIComponent$prime = function ($48) {
    return unsafeFromString(fromJust(JSURI["decodeURIComponent"](Data_String_NonEmpty_Internal.toString($48))));
};
var alpha = /* #__PURE__ */ Parsing_String.satisfy(function (c) {
    return c >= "a" && c <= "z" || c >= "A" && c <= "Z";
});
var alphaNum = /* #__PURE__ */ alt(alpha)(Parsing_String_Basic.digit);
var unreserved = /* #__PURE__ */ alt(alphaNum)(/* #__PURE__ */ alt(/* #__PURE__ */ Parsing_String["char"]("-"))(/* #__PURE__ */ alt(/* #__PURE__ */ Parsing_String["char"]("."))(/* #__PURE__ */ alt(/* #__PURE__ */ Parsing_String["char"]("_"))(/* #__PURE__ */ Parsing_String["char"]("~")))));
export {
    URIPartParseError,
    wrapParser,
    alpha,
    alphaNum,
    unreserved,
    pctEncoded,
    subDelims,
    printEncoded,
    printEncoded$prime,
    decodeURIComponent$prime,
    eqURIPartParseError,
    ordURIPartParseError,
    newtypeURIPartParseError,
    genericURIPartParseError,
    showURIPartParseError
};
